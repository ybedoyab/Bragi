{
  "version": 3,
  "sources": ["../../../../../node_modules/event-e3/event-e3.js", "../../../../../node_modules/@connect2ic/core/dist/connect2ic-core.esm.js"],
  "sourcesContent": ["/**\n * Use it as a constructor\n * or as a decorator for an existing object\n * or as a base class for extend\n * cannot be used as a mixin for a constructor's prototype\n * without calling the constructor\n */\nfunction EventEmitter3(obj) {\n    (obj || this)._callbacks = Object.create(null);\n    if (obj) {return Object.assign(obj, EventEmitter3.prototype);}\n}\n\n/**\n * Listen on the given `eventName` with `fn`\n *\n * @param {String | Symbol} eventName\n * @param {Function} fn\n * @api public\n */\n\nEventEmitter3.prototype.on = function (eventName, fn) {\n    (this._callbacks[eventName] = this._callbacks[eventName] || [])\n        .push(fn);\n};\n\n/**\n * Adds an `eventName` listener that will be invoked once then removed\n *\n * @param {String | Symbol} eventName\n * @param {Function} fn\n * @api public\n */\n\nEventEmitter3.prototype.once = function (eventName, fn) {\n    const once = (data) => {\n        this.off(eventName, once);\n        fn(data);\n    };\n\n    once.fn = fn; // makes it possible to remove with off\n    this.on(eventName, once);\n};\n\n/**\n * Remove a callback for `eventName` or\n * all callbacks for `eventName` or\n * all callbacks for all events\n *\n * @param {String | Symbol} eventName\n * @param {Function} fn\n * @api public\n */\n\nEventEmitter3.prototype.off = function (eventName, fn) {\n    // all\n    if (!eventName) {\n        this._callbacks = Object.create(null);\n        return;\n    }\n\n    // specific event\n    const callbacks = this._callbacks[eventName];\n    if (!callbacks) {\n        return;\n    }\n\n    // remove all handlers\n    if (!fn) {\n        delete this._callbacks[eventName];\n        return;\n    }\n\n    // remove specific handler\n    const index = callbacks.findIndex(function (cb) {\n        return (cb === fn || cb.fn === fn);\n    });\n    if (index > -1) {\n        // Remove event specific arrays for the eventName type that no\n        // one is subscribed for, to avoid memory leak.\n        if (callbacks.length === 1) {\n            delete this._callbacks[eventName];\n        } else {\n            callbacks.splice(index, 1);\n        }\n    }\n};\n\n/**\n * Emit `eventName` with data\n *\n * @param {String | Symbol} eventName\n * @param {any} data\n */\n\nEventEmitter3.prototype.emit = function (eventName, data) {\n    const callbacks = this._callbacks[eventName];\n    if (!callbacks) {\n        return;\n    }\n    const frozenCallbacks = Array.from(callbacks);\n    frozenCallbacks.forEach(callback => {\n        callback(data);\n    });\n};\n\n/**\n * Return array of callbacks for `eventName`\n *\n * @param {String | Symbol} eventName\n * @return {Array} listeners\n * @api public\n */\n\nEventEmitter3.prototype.listeners = function (eventName) {\n    return this._callbacks[eventName] || [];\n};\n\n/**\n * True if this emitter has `eventName` handlers\n *\n * @param {String | Symbol} eventName\n * @return {Boolean}\n * @api public\n */\n\nEventEmitter3.prototype.hasListeners = function (eventName) {\n    return Boolean(this.listeners(eventName).length);\n};\n\n/**\n * Returns an array of event names for which the emitter has registered listeners\n *\n * @return {Array <String || Symbol>}\n * @api public\n */\nEventEmitter3.prototype.eventNames = function () {\n    return Reflect.ownKeys(this._callbacks);\n};\n\n/**\n * Returns an array of event anmes of type string\n * for which the emitter has registered listeners\n *\n * @return {Array <String>}\n * @api public\n */\nEventEmitter3.prototype.eventNamesStrings = function () {\n    return Object.keys(this._callbacks);\n};\n\nexport default EventEmitter3;\n", "import { assign, forwardTo, createMachine, interpret } from 'xstate';\nimport { HttpAgent, Actor } from '@dfinity/agent';\nimport Emitter from 'event-e3';\n\nconst authStates = {\n  id: \"auth\",\n  initial: \"initializing\",\n  schema: {\n    context: {},\n    events: {}\n  },\n  states: {\n    initializing: {\n      on: {\n        DONE: {\n          target: \"idle\",\n          actions: assign((context, event) => ({\n            providers: event.data.providers\n          }))\n        },\n        DONE_AND_CONNECTED: {\n          target: \"connected\",\n          actions: [assign((context, event) => ({\n            providers: event.data.providers,\n            activeProvider: event.data.activeProvider,\n            principal: event.data.principal\n          }))]\n        }\n      },\n      invoke: {\n        id: \"init\",\n        src: (context, event) => async (callback, onReceive) => {\n          // TODO: clean up\n          const {\n            providers\n          } = context;\n          await Promise.allSettled(providers.map(p => p.init()));\n          let connectedProviders = providers.map(p => new Promise(async (resolve, reject) => {\n            const isConnected = await p.isConnected();\n            isConnected ? resolve(p) : reject();\n          })); // TODO: split into 2?\n\n          Promise.any(connectedProviders).then(connectedProvider => {\n            callback({\n              type: \"DONE_AND_CONNECTED\",\n              data: {\n                providers,\n                activeProvider: connectedProvider,\n                principal: connectedProvider.principal\n              }\n            });\n          }).catch(e => {\n            callback({\n              type: \"DONE\",\n              data: {\n                providers\n              }\n            });\n          });\n        }\n      },\n      exit: [\"onInit\"]\n    },\n    idle: {\n      invoke: {\n        id: \"connectService\",\n        autoForward: true,\n        src: (context, _event) => (callback, onReceive) => {\n          onReceive(async e => {\n            // TODO: Handle cancellation with AbortController?\n            const provider = context.providers.find(p => p.meta.id === e.data.provider);\n\n            if (e.type === \"CONNECT\") {\n              const connected = await provider.connect();\n\n              if (connected) {\n                callback({\n                  type: \"CONNECT_DONE\",\n                  // TODO: fix?\n                  data: {\n                    activeProvider: provider,\n                    principal: provider.principal\n                  }\n                });\n              } else {\n                callback({\n                  type: \"ERROR\",\n                  data: {\n                    error: e\n                  }\n                });\n              }\n            }\n          });\n        }\n      },\n      on: {\n        CONNECT: {\n          actions: forwardTo(\"connectService\")\n        },\n        CONNECT_DONE: {\n          target: \"connected\",\n          actions: [assign((context, event) => ({\n            activeProvider: event.data.activeProvider,\n            principal: event.data.principal\n          }))]\n        },\n        ERROR: {// actions: assign((context, event) => {\n          //   return ({\n          //     provider: event.data.provider,\n          //     principal: event.data.principal,\n          //   })\n          // }),\n        }\n      }\n    },\n    connected: {\n      entry: [\"onConnect\"],\n      invoke: {\n        id: \"actorService\",\n        src: \"actorService\",\n        autoForward: true\n      },\n      on: {\n        DISCONNECT: {\n          target: \"disconnecting\" // TODO: pass provider?\n\n        },\n        SAVE_ACTOR: {\n          actions: assign((context, event) => ({\n            actors: { ...context.actors,\n              [event.data.canisterName]: event.data.actor\n            }\n          }))\n        }\n      }\n    },\n    disconnecting: {\n      invoke: {\n        id: \"disconnect\",\n        src: (context, event) => async () => {\n          var _context$activeProvid;\n\n          await ((_context$activeProvid = context.activeProvider) === null || _context$activeProvid === void 0 ? void 0 : _context$activeProvid.disconnect());\n        },\n        onDone: {\n          target: \"idle\",\n          // TODO: empty context\n          actions: [assign((context, event) => ({\n            activeProvider: undefined,\n            actors: {},\n            principal: undefined\n          })), \"onDisconnect\"]\n        },\n        onError: {\n          target: \"connected\",\n          actions: []\n        }\n      }\n    }\n  }\n};\n\nconst createClient = _ref => {\n  let {\n    canisters = {},\n    providers: p = [],\n    globalProviderConfig = {}\n  } = _ref;\n  const config = {\n    dev: true,\n    autoConnect: true,\n    host: window.location.origin,\n    whitelist: Object.values(canisters).map(canister => canister.canisterId),\n    ...globalProviderConfig\n  };\n  const providers = typeof p === \"function\" ? p(config) : p;\n  providers.forEach(p => p.config = config);\n  const anonymousActors = Object.entries(canisters).map(_ref2 => {\n    let [canisterName, val] = _ref2;\n    const {\n      canisterId,\n      idlFactory\n    } = val;\n    const agent = new HttpAgent({\n      host: config.host\n    }); // Fetch root key for certificate validation during development\n\n    if (config.dev) {\n      agent.fetchRootKey().catch(err => {\n        console.warn(\"Unable to fetch root key. Check to ensure that your local replica is running\");\n        console.error(err);\n      });\n    }\n\n    const actor = Actor.createActor(idlFactory, {\n      agent,\n      canisterId\n    });\n    return {\n      actor,\n      canisterName,\n      idlFactory,\n      canisterId\n    };\n  }).reduce((acc, _ref3) => {\n    let {\n      canisterName,\n      actor\n    } = _ref3;\n    return { ...acc,\n      [canisterName]: actor\n    };\n  }, {});\n  const emitter = new Emitter();\n  const rootMachine = createMachine({\n    id: \"root\",\n    initial: \"idle\",\n    context: { ...config,\n      providers,\n      anonymousActors,\n      canisters,\n      actors: {},\n      principal: undefined,\n      activeProvider: undefined\n    },\n    schema: {\n      context: {},\n      events: {}\n    },\n    states: {\n      idle: { ...authStates\n      }\n    }\n  }, {\n    services: {\n      actorService: (context, _event) => (callback, onReceive) => {\n        onReceive(async e => {\n          if (e.type === \"CREATE_ACTOR\") {\n            const actor = await context.activeProvider.createActor(e.data.canisterId, e.data.idlFactory);\n            callback({\n              type: \"SAVE_ACTOR\",\n              data: {\n                actor,\n                canisterName: e.data.canisterName\n              }\n            });\n          }\n        });\n        Object.entries(context.canisters).forEach(async _ref4 => {\n          let [canisterName, val] = _ref4;\n          const {\n            canisterId,\n            idlFactory\n          } = val;\n          const actor = await context.activeProvider.createActor(canisterId, idlFactory);\n          callback({\n            type: \"SAVE_ACTOR\",\n            data: {\n              actor,\n              canisterName\n            }\n          });\n        });\n      }\n    },\n    actions: {\n      onDisconnect: (context, event) => {\n        emitter.emit(\"disconnect\");\n      },\n      onInit: (context, event) => {\n        emitter.emit(\"init\");\n      },\n      onConnect: (context, event) => {\n        emitter.emit(\"connect\", event.data);\n      }\n    }\n  });\n  const service = interpret(rootMachine, {\n    devTools: true\n  });\n  service.start();\n  return {\n    _service: service,\n    on: (evt, fn) => {\n      emitter.on(evt, fn);\n      return () => emitter.off(evt, fn);\n    },\n    subscribe: fn => {\n      const sub = service.subscribe(fn);\n      return sub.unsubscribe;\n    },\n    connect: provider => {\n      service.send({\n        type: \"CONNECT\",\n        data: {\n          provider\n        }\n      });\n    },\n    disconnect: () => {\n      service.send({\n        type: \"DISCONNECT\"\n      });\n    },\n\n    get providers() {\n      return service.state.context.providers;\n    },\n\n    get activeProvider() {\n      return service.state.context.activeProvider;\n    },\n\n    get principal() {\n      return service.state.context.principal;\n    },\n\n    get actors() {\n      return service.state.context.actors;\n    },\n\n    get anonymousActors() {\n      return service.state.context.anonymousActors;\n    },\n\n    get status() {\n      return service.state.value.idle;\n    },\n\n    get config() {\n      return config;\n    }\n\n  };\n};\n\nexport { createClient };\n"],
  "mappings": "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",
  "names": ["p"]
}
