{
  "version": 3,
  "sources": ["../../../../../node_modules/@dfinity/agent/src/canisterStatus/index.ts", "../../../../../node_modules/@dfinity/candid/src/idl.ts", "../../../../../node_modules/@dfinity/principal/src/utils/base32.ts", "../../../../../node_modules/@dfinity/principal/src/utils/getCrc.ts", "../../../../../node_modules/@dfinity/principal/src/utils/sha224.ts", "../../../../../node_modules/@dfinity/principal/src/index.ts", "../../../../../node_modules/@dfinity/candid/src/utils/buffer.ts", "../../../../../node_modules/@dfinity/candid/src/utils/hash.ts", "../../../../../node_modules/@dfinity/candid/src/utils/leb128.ts", "../../../../../node_modules/@dfinity/candid/src/utils/bigint-math.ts", "../../../../../node_modules/@dfinity/agent/src/errors.ts", "../../../../../node_modules/@dfinity/agent/src/cbor.ts", "../../../../../node_modules/@dfinity/agent/src/utils/buffer.ts", "../../../../../node_modules/@dfinity/agent/src/request_id.ts", "../../../../../node_modules/@dfinity/agent/src/vendor/bls/bls.ts", "../../../../../node_modules/@dfinity/agent/src/vendor/bls/wasm.ts", "../../../../../node_modules/@dfinity/agent/src/utils/bls.ts", "../../../../../node_modules/@dfinity/agent/src/certificate.ts"],
  "sourcesContent": ["/** @module CanisterStatus */\n\nimport { lebDecode, PipeArrayBuffer } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../errors';\nimport { HttpAgent } from '../agent/http';\nimport { Certificate, CreateCertificateOptions } from '../certificate';\nimport { toHex } from '../utils/buffer';\nimport * as Cbor from '../cbor';\n\n/**\n * Types of an entry on the canisterStatus map.\n * An entry of null indicates that the request failed, due to lack of permissions or the result being missing.\n */\nexport type Status = string | ArrayBuffer | Date | ArrayBuffer[] | Principal[] | bigint | null;\n\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using {@link TextEncoder}\n */\nexport interface CustomPath {\n  key: string;\n  path: ArrayBuffer[] | string;\n  decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n}\n\n/**\n * Interface to request metadata from the icp:public or icp:private sections.\n * Similar to {@link CustomPath}, but accepts a simple string argument.\n * Private metadata will require the ${@link Identity} used by the ${@link HttpAgent} will need to be requested using an identity that controlls the canister.\n */\nexport interface MetaData {\n  kind: 'metadata';\n  key: string;\n  path: string | ArrayBuffer;\n  decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n}\n\n/**\n * Pre-configured fields for canister status paths\n */\nexport type Path =\n  | 'time'\n  | 'controllers'\n  | 'subnet'\n  | 'module_hash'\n  | 'candid'\n  | MetaData\n  | CustomPath;\n\nexport type StatusMap = Map<Path | string, Status>;\n\nexport type CanisterStatusOptions = {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n  blsVerify?: CreateCertificateOptions['blsVerify'];\n};\n\n/**\n *\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async (options: {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n}): Promise<StatusMap> => {\n  const { canisterId, agent, paths } = options;\n\n  const uniquePaths = [...new Set(paths)];\n\n  // Map path options to their correct formats\n  const encodedPaths = uniquePaths.map(path => {\n    return encodePath(path, canisterId);\n  });\n  const status = new Map<string | Path, Status>();\n\n  const promises = uniquePaths.map((path, index) => {\n    return (async () => {\n      try {\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPaths[index]],\n        });\n        const cert = await Certificate.create({\n          certificate: response.certificate,\n          rootKey: agent.rootKey,\n          canisterId: canisterId,\n        });\n\n        const data = cert.lookup(encodePath(uniquePaths[index], canisterId));\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time': {\n              status.set(path, decodeTime(data));\n              break;\n            }\n            case 'controllers': {\n              status.set(path, decodeControllers(data));\n              break;\n            }\n            case 'module_hash': {\n              status.set(path, decodeHex(data));\n              break;\n            }\n            case 'candid': {\n              status.set(path, new TextDecoder().decode(data));\n              break;\n            }\n            default: {\n              // Check for CustomPath signature\n              if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                switch (path.decodeStrategy) {\n                  case 'raw':\n                    status.set(path.key, data);\n                    break;\n                  case 'leb128': {\n                    status.set(path.key, decodeLeb128(data));\n                    break;\n                  }\n                  case 'cbor': {\n                    status.set(path.key, decodeCbor(data));\n                    break;\n                  }\n                  case 'hex': {\n                    status.set(path.key, decodeHex(data));\n                    break;\n                  }\n                  case 'utf-8': {\n                    status.set(path.key, decodeUtf8(data));\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // Break on signature verification errors\n        if ((error as AgentError)?.message?.includes('Invalid certificate')) {\n          throw new AgentError((error as AgentError).message);\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n\n  return status;\n};\n\nexport const encodePath = (path: Path, canisterId: Principal): ArrayBuffer[] => {\n  const encoder = new TextEncoder();\n\n  const encode = (arg: string): ArrayBuffer => {\n    return new DataView(encoder.encode(arg).buffer).buffer;\n  };\n  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n  switch (path) {\n    case 'time':\n      return [encode('time')];\n    case 'controllers':\n      return [encode('canister'), canisterBuffer, encode('controllers')];\n    case 'module_hash':\n      return [encode('canister'), canisterBuffer, encode('module_hash')];\n    case 'subnet':\n      return [encode('subnet')];\n    case 'candid':\n      return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n    default: {\n      // Check for CustomPath signature\n      if ('key' in path && 'path' in path) {\n        // For simplified metadata queries\n        if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n          const metaPath = path.path;\n          const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n\n          return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n\n          // For non-metadata, return the provided custompath\n        } else {\n          return path['path'];\n        }\n      }\n    }\n  }\n  throw new Error(\n    `An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`,\n  );\n};\n\nconst decodeHex = (buf: ArrayBuffer): string => {\n  return toHex(buf);\n};\n\nconst decodeLeb128 = (buf: ArrayBuffer): bigint => {\n  return lebDecode(new PipeArrayBuffer(buf));\n};\n\nconst decodeCbor = (buf: ArrayBuffer): ArrayBuffer[] => {\n  return Cbor.decode(buf);\n};\n\nconst decodeUtf8 = (buf: ArrayBuffer): string => {\n  return new TextDecoder().decode(buf);\n};\n\n// time is a LEB128-encoded Nat\nconst decodeTime = (buf: ArrayBuffer): Date => {\n  const decoded = decodeLeb128(buf);\n  return new Date(Number(decoded / BigInt(1_000_000)));\n};\n\n// Controllers are CBOR-encoded buffers, starting with a Tag we don't need\nconst decodeControllers = (buf: ArrayBuffer): Principal[] => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [tag, ...controllersRaw] = decodeCbor(buf);\n  return controllersRaw.map((buf: ArrayBuffer) => {\n    return Principal.fromUint8Array(new Uint8Array(buf));\n  });\n};\n", "// tslint:disable:max-classes-per-file\nimport { Principal as PrincipalId } from '@dfinity/principal';\nimport { JsonValue } from './types';\nimport { concat, PipeArrayBuffer as Pipe } from './utils/buffer';\nimport { idlLabelToId } from './utils/hash';\nimport {\n  lebDecode,\n  lebEncode,\n  readIntLE,\n  readUIntLE,\n  safeRead,\n  safeReadUint8,\n  slebDecode,\n  slebEncode,\n  writeIntLE,\n  writeUIntLE,\n} from './utils/leb128';\nimport { iexp2 } from './utils/bigint-math';\n\n// tslint:disable:max-line-length\n/**\n * This module provides a combinator library to create serializers/deserializers\n * between JavaScript values and IDL used by canisters on the Internet Computer,\n * as documented at https://github.com/dfinity/candid/blob/119703ba342d2fef6ab4972d2541b9fe36ae8e36/spec/Candid.md\n */\n// tslint:enable:max-line-length\n\nconst enum IDLTypeIds {\n  Null = -1,\n  Bool = -2,\n  Nat = -3,\n  Int = -4,\n  Float32 = -13,\n  Float64 = -14,\n  Text = -15,\n  Reserved = -16,\n  Empty = -17,\n  Opt = -18,\n  Vector = -19,\n  Record = -20,\n  Variant = -21,\n  Func = -22,\n  Service = -23,\n  Principal = -24,\n}\n\nconst magicNumber = 'DIDL';\nconst toReadableString_max = 400; // will not display arguments after 400chars. Makes sure 2mb blobs don't get inside the error\n\nfunction zipWith<TX, TY, TR>(xs: TX[], ys: TY[], f: (a: TX, b: TY) => TR): TR[] {\n  return xs.map((x, i) => f(x, ys[i]));\n}\n\n/**\n * An IDL Type Table, which precedes the data in the stream.\n */\nclass TypeTable {\n  // List of types. Needs to be an array as the index needs to be stable.\n  private _typs: ArrayBuffer[] = [];\n  private _idx = new Map<string, number>();\n\n  public has(obj: ConstructType) {\n    return this._idx.has(obj.name);\n  }\n\n  public add<T>(type: ConstructType<T>, buf: ArrayBuffer) {\n    const idx = this._typs.length;\n    this._idx.set(type.name, idx);\n    this._typs.push(buf);\n  }\n\n  public merge<T>(obj: ConstructType<T>, knot: string) {\n    const idx = this._idx.get(obj.name);\n    const knotIdx = this._idx.get(knot);\n    if (idx === undefined) {\n      throw new Error('Missing type index for ' + obj);\n    }\n    if (knotIdx === undefined) {\n      throw new Error('Missing type index for ' + knot);\n    }\n    this._typs[idx] = this._typs[knotIdx];\n\n    // Delete the type.\n    this._typs.splice(knotIdx, 1);\n    this._idx.delete(knot);\n  }\n\n  public encode() {\n    const len = lebEncode(this._typs.length);\n    const buf = concat(...this._typs);\n    return concat(len, buf);\n  }\n\n  public indexOf(typeName: string) {\n    if (!this._idx.has(typeName)) {\n      throw new Error('Missing type index for ' + typeName);\n    }\n    return slebEncode(this._idx.get(typeName) || 0);\n  }\n}\n\nexport abstract class Visitor<D, R> {\n  public visitType<T>(t: Type<T>, data: D): R {\n    throw new Error('Not implemented');\n  }\n  public visitPrimitive<T>(t: PrimitiveType<T>, data: D): R {\n    return this.visitType(t, data);\n  }\n  public visitEmpty(t: EmptyClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitBool(t: BoolClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitNull(t: NullClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitReserved(t: ReservedClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitText(t: TextClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitNumber<T>(t: PrimitiveType<T>, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitInt(t: IntClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitNat(t: NatClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitFloat(t: FloatClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitFixedInt(t: FixedIntClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitFixedNat(t: FixedNatClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitPrincipal(t: PrincipalClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n\n  public visitConstruct<T>(t: ConstructType<T>, data: D): R {\n    return this.visitType(t, data);\n  }\n  public visitVec<T>(t: VecClass<T>, ty: Type<T>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitOpt<T>(t: OptClass<T>, ty: Type<T>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitRecord(t: RecordClass, fields: Array<[string, Type]>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitTuple<T extends any[]>(t: TupleClass<T>, components: Type[], data: D): R {\n    const fields: Array<[string, Type]> = components.map((ty, i) => [`_${i}_`, ty]);\n    return this.visitRecord(t, fields, data);\n  }\n  public visitVariant(t: VariantClass, fields: Array<[string, Type]>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitRec<T>(t: RecClass<T>, ty: ConstructType<T>, data: D): R {\n    return this.visitConstruct(ty, data);\n  }\n  public visitFunc(t: FuncClass, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitService(t: ServiceClass, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n}\n\n/**\n * Represents an IDL type.\n */\nexport abstract class Type<T = any> {\n  public abstract readonly name: string;\n  public abstract accept<D, R>(v: Visitor<D, R>, d: D): R;\n\n  /* Display type name */\n  public display(): string {\n    return this.name;\n  }\n\n  public valueToString(x: T): string {\n    return toReadableString(x);\n  }\n\n  /* Implement `T` in the IDL spec, only needed for non-primitive types */\n  public buildTypeTable(typeTable: TypeTable): void {\n    if (!typeTable.has(this)) {\n      this._buildTypeTableImpl(typeTable);\n    }\n  }\n\n  /**\n   * Assert that JavaScript's `x` is the proper type represented by this\n   * Type.\n   */\n  public abstract covariant(x: any): x is T;\n\n  /**\n   * Encode the value. This needs to be public because it is used by\n   * encodeValue() from different types.\n   * @internal\n   */\n  public abstract encodeValue(x: T): ArrayBuffer;\n\n  /**\n   * Implement `I` in the IDL spec.\n   * Encode this type for the type table.\n   */\n  public abstract encodeType(typeTable: TypeTable): ArrayBuffer;\n\n  public abstract checkType(t: Type): Type;\n  public abstract decodeValue(x: Pipe, t: Type): T;\n\n  protected abstract _buildTypeTableImpl(typeTable: TypeTable): void;\n}\n\nexport abstract class PrimitiveType<T = any> extends Type<T> {\n  public checkType(t: Type): Type {\n    if (this.name !== t.name) {\n      throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n    }\n    return t;\n  }\n  public _buildTypeTableImpl(typeTable: TypeTable): void {\n    // No type table encoding for Primitive types.\n    return;\n  }\n}\n\nexport abstract class ConstructType<T = any> extends Type<T> {\n  public checkType(t: Type): ConstructType<T> {\n    if (t instanceof RecClass) {\n      const ty = t.getType();\n      if (typeof ty === 'undefined') {\n        throw new Error('type mismatch with uninitialized type');\n      }\n      return ty;\n    }\n    throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n  }\n  public encodeType(typeTable: TypeTable) {\n    return typeTable.indexOf(this.name);\n  }\n}\n\n/**\n * Represents an IDL Empty, a type which has no inhabitants.\n * Since no values exist for this type, it cannot be serialised or deserialised.\n * Result types like `Result<Text, Empty>` should always succeed.\n */\nexport class EmptyClass extends PrimitiveType<never> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitEmpty(this, d);\n  }\n\n  public covariant(x: any): x is never {\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(): never {\n    throw new Error('Empty cannot appear as a function argument');\n  }\n\n  public valueToString(): never {\n    throw new Error('Empty cannot appear as a value');\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Empty);\n  }\n\n  public decodeValue(): never {\n    throw new Error('Empty cannot appear as an output');\n  }\n\n  get name() {\n    return 'empty';\n  }\n}\n\n/**\n * Represents an IDL Unknown, a placeholder type for deserialization only.\n * When decoding a value as Unknown, all fields will be retained but the names are only available in\n * hashed form.\n * A deserialized unknown will offer it's actual type by calling the `type()` function.\n * Unknown cannot be serialized and attempting to do so will throw an error.\n */\nexport class UnknownClass extends Type {\n  public checkType(t: Type): Type {\n    throw new Error('Method not implemented for unknown.');\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    throw v.visitType(this, d);\n  }\n\n  public covariant(x: any): x is any {\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(): never {\n    throw new Error('Unknown cannot appear as a function argument');\n  }\n\n  public valueToString(): never {\n    throw new Error('Unknown cannot appear as a value');\n  }\n\n  public encodeType(): never {\n    throw new Error('Unknown cannot be serialized');\n  }\n\n  public decodeValue(b: Pipe, t: Type): any {\n    let decodedValue = t.decodeValue(b, t);\n\n    if (Object(decodedValue) !== decodedValue) {\n      // decodedValue is primitive. Box it, otherwise we cannot add the type() function.\n      // The type() function is important for primitives because otherwise we cannot tell apart the\n      // different number types.\n      decodedValue = Object(decodedValue);\n    }\n\n    let typeFunc;\n    if (t instanceof RecClass) {\n      typeFunc = () => t.getType();\n    } else {\n      typeFunc = () => t;\n    }\n    // Do not use 'decodedValue.type = typeFunc' because this would lead to an enumerable property\n    // 'type' which means it would be serialized if the value would be candid encoded again.\n    // This in turn leads to problems if the decoded value is a variant because these values are\n    // only allowed to have a single property.\n    Object.defineProperty(decodedValue, 'type', {\n      value: typeFunc,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n    return decodedValue;\n  }\n\n  protected _buildTypeTableImpl(): void {\n    throw new Error('Unknown cannot be serialized');\n  }\n\n  get name() {\n    return 'Unknown';\n  }\n}\n\n/**\n * Represents an IDL Bool\n */\nexport class BoolClass extends PrimitiveType<boolean> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitBool(this, d);\n  }\n\n  public covariant(x: any): x is boolean {\n    if (typeof x === 'boolean') return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: boolean): ArrayBuffer {\n    return new Uint8Array([x ? 1 : 0]);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Bool);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    switch (safeReadUint8(b)) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new Error('Boolean value out of range');\n    }\n  }\n\n  get name() {\n    return 'bool';\n  }\n}\n\n/**\n * Represents an IDL Null\n */\nexport class NullClass extends PrimitiveType<null> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitNull(this, d);\n  }\n\n  public covariant(x: any): x is null {\n    if (x === null) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue() {\n    return new ArrayBuffer(0);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Null);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    return null;\n  }\n\n  get name() {\n    return 'null';\n  }\n}\n\n/**\n * Represents an IDL Reserved\n */\nexport class ReservedClass extends PrimitiveType<any> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitReserved(this, d);\n  }\n\n  public covariant(x: any): x is any {\n    return true;\n  }\n\n  public encodeValue() {\n    return new ArrayBuffer(0);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Reserved);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    if (t.name !== this.name) {\n      t.decodeValue(b, t);\n    }\n    return null;\n  }\n\n  get name() {\n    return 'reserved';\n  }\n}\n\n/**\n * Represents an IDL Text\n */\nexport class TextClass extends PrimitiveType<string> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitText(this, d);\n  }\n\n  public covariant(x: any): x is string {\n    if (typeof x === 'string') return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: string) {\n    const buf = new TextEncoder().encode(x);\n    const len = lebEncode(buf.byteLength);\n    return concat(len, buf);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Text);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const len = lebDecode(b);\n    const buf = safeRead(b, Number(len));\n    const decoder = new TextDecoder('utf8', { fatal: true });\n    return decoder.decode(buf);\n  }\n\n  get name() {\n    return 'text';\n  }\n\n  public valueToString(x: string) {\n    return '\"' + x + '\"';\n  }\n}\n\n/**\n * Represents an IDL Int\n */\nexport class IntClass extends PrimitiveType<bigint> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitInt(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    // We allow encoding of JavaScript plain numbers.\n    // But we will always decode to bigint.\n    if (typeof x === 'bigint' || Number.isInteger(x)) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return slebEncode(x);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Int);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    return slebDecode(b);\n  }\n\n  get name() {\n    return 'int';\n  }\n\n  public valueToString(x: bigint) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL Nat\n */\nexport class NatClass extends PrimitiveType<bigint> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitNat(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    // We allow encoding of JavaScript plain numbers.\n    // But we will always decode to bigint.\n    if ((typeof x === 'bigint' && x >= BigInt(0)) || (Number.isInteger(x) && x >= 0)) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return lebEncode(x);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Nat);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    return lebDecode(b);\n  }\n\n  get name() {\n    return 'nat';\n  }\n\n  public valueToString(x: bigint) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL Float\n */\nexport class FloatClass extends PrimitiveType<number> {\n  constructor(private _bits: number) {\n    super();\n    if (_bits !== 32 && _bits !== 64) {\n      throw new Error('not a valid float type');\n    }\n  }\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFloat(this, d);\n  }\n\n  public covariant(x: any): x is number {\n    if (typeof x === 'number' || x instanceof Number) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: number) {\n    const buf = new ArrayBuffer(this._bits / 8);\n    const view = new DataView(buf);\n    if (this._bits === 32) {\n      view.setFloat32(0, x, true);\n    } else {\n      view.setFloat64(0, x, true);\n    }\n    return buf;\n  }\n\n  public encodeType() {\n    const opcode = this._bits === 32 ? IDLTypeIds.Float32 : IDLTypeIds.Float64;\n    return slebEncode(opcode);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const bytes = safeRead(b, this._bits / 8);\n    const view = new DataView(bytes);\n    if (this._bits === 32) {\n      return view.getFloat32(0, true);\n    } else {\n      return view.getFloat64(0, true);\n    }\n  }\n\n  get name() {\n    return 'float' + this._bits;\n  }\n\n  public valueToString(x: number) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL fixed-width Int(n)\n */\nexport class FixedIntClass extends PrimitiveType<bigint | number> {\n  constructor(public readonly _bits: number) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFixedInt(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    const min = iexp2(this._bits - 1) * BigInt(-1);\n    const max = iexp2(this._bits - 1) - BigInt(1);\n    let ok = false;\n    if (typeof x === 'bigint') {\n      ok = x >= min && x <= max;\n    } else if (Number.isInteger(x)) {\n      const v = BigInt(x);\n      ok = v >= min && v <= max;\n    } else {\n      ok = false;\n    }\n\n    if (ok) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return writeIntLE(x, this._bits / 8);\n  }\n\n  public encodeType() {\n    const offset = Math.log2(this._bits) - 3;\n    return slebEncode(-9 - offset);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const num = readIntLE(b, this._bits / 8);\n    if (this._bits <= 32) {\n      return Number(num);\n    } else {\n      return num;\n    }\n  }\n\n  get name() {\n    return `int${this._bits}`;\n  }\n\n  public valueToString(x: bigint | number) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL fixed-width Nat(n)\n */\nexport class FixedNatClass extends PrimitiveType<bigint | number> {\n  constructor(public readonly _bits: number) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFixedNat(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    const max = iexp2(this._bits);\n    let ok = false;\n    if (typeof x === 'bigint' && x >= BigInt(0)) {\n      ok = x < max;\n    } else if (Number.isInteger(x) && x >= 0) {\n      const v = BigInt(x);\n      ok = v < max;\n    } else {\n      ok = false;\n    }\n    if (ok) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return writeUIntLE(x, this._bits / 8);\n  }\n\n  public encodeType() {\n    const offset = Math.log2(this._bits) - 3;\n    return slebEncode(-5 - offset);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const num = readUIntLE(b, this._bits / 8);\n    if (this._bits <= 32) {\n      return Number(num);\n    } else {\n      return num;\n    }\n  }\n\n  get name() {\n    return `nat${this._bits}`;\n  }\n\n  public valueToString(x: bigint | number) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL Array\n *\n * Arrays of fixed-sized nat/int type (e.g. nat8), are encoded from and decoded to TypedArrays (e.g. Uint8Array).\n * Arrays of float or other non-primitive types are encoded/decoded as untyped array in Javascript.\n *\n * @param {Type} t\n */\nexport class VecClass<T> extends ConstructType<T[]> {\n  // If true, this vector is really a blob and we can just use memcpy.\n  //\n  // NOTE:\n  // With support of encoding/dencoding of TypedArrays, this optimization is\n  // only used when plain array of bytes are passed as encoding input in order\n  // to be backward compatible.\n  private _blobOptimization = false;\n\n  constructor(protected _type: Type<T>) {\n    super();\n    if (_type instanceof FixedNatClass && _type._bits === 8) {\n      this._blobOptimization = true;\n    }\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitVec(this, this._type, d);\n  }\n\n  public covariant(x: any): x is T[] {\n    // Special case for ArrayBuffer\n    const bits =\n      this._type instanceof FixedNatClass\n        ? this._type._bits\n        : this._type instanceof FixedIntClass\n        ? this._type._bits\n        : 0;\n\n    if (\n      (ArrayBuffer.isView(x) && bits == (x as any).BYTES_PER_ELEMENT * 8) ||\n      (Array.isArray(x) &&\n        x.every((v, idx) => {\n          try {\n            return this._type.covariant(v);\n          } catch (e: any) {\n            throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${idx} -> ${e.message}`);\n          }\n        }))\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: T[]) {\n    const len = lebEncode(x.length);\n    if (this._blobOptimization) {\n      return concat(len, new Uint8Array(x as unknown as number[]));\n    }\n    if (ArrayBuffer.isView(x)) {\n      return concat(len, new Uint8Array(x.buffer));\n    }\n    const buf = new Pipe(new ArrayBuffer(len.byteLength + x.length), 0);\n    buf.write(len);\n    for (const d of x) {\n      const encoded = this._type.encodeValue(d);\n      buf.write(new Uint8Array(encoded));\n    }\n    return buf.buffer;\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    this._type.buildTypeTable(typeTable);\n\n    const opCode = slebEncode(IDLTypeIds.Vector);\n    const buffer = this._type.encodeType(typeTable);\n    typeTable.add(this, concat(opCode, buffer));\n  }\n\n  public decodeValue(b: Pipe, t: Type): T[] {\n    const vec = this.checkType(t);\n    if (!(vec instanceof VecClass)) {\n      throw new Error('Not a vector type');\n    }\n    const len = Number(lebDecode(b));\n\n    if (this._type instanceof FixedNatClass) {\n      if (this._type._bits == 8) {\n        return new Uint8Array(b.read(len)) as unknown as T[];\n      }\n      if (this._type._bits == 16) {\n        return new Uint16Array(b.read(len * 2)) as unknown as T[];\n      }\n      if (this._type._bits == 32) {\n        return new Uint32Array(b.read(len * 4)) as unknown as T[];\n      }\n      if (this._type._bits == 64) {\n        return new BigUint64Array(b.read(len * 8)) as unknown as T[];\n      }\n    }\n\n    if (this._type instanceof FixedIntClass) {\n      if (this._type._bits == 8) {\n        return new Int8Array(b.read(len)) as unknown as T[];\n      }\n      if (this._type._bits == 16) {\n        return new Int16Array(b.read(len * 2)) as unknown as T[];\n      }\n      if (this._type._bits == 32) {\n        return new Int32Array(b.read(len * 4)) as unknown as T[];\n      }\n      if (this._type._bits == 64) {\n        return new BigInt64Array(b.read(len * 8)) as unknown as T[];\n      }\n    }\n\n    const rets: T[] = [];\n    for (let i = 0; i < len; i++) {\n      rets.push(this._type.decodeValue(b, vec._type));\n    }\n    return rets;\n  }\n\n  get name() {\n    return `vec ${this._type.name}`;\n  }\n\n  public display() {\n    return `vec ${this._type.display()}`;\n  }\n\n  public valueToString(x: T[]) {\n    const elements = x.map(e => this._type.valueToString(e));\n    return 'vec {' + elements.join('; ') + '}';\n  }\n}\n\n/**\n * Represents an IDL Option\n * @param {Type} t\n */\nexport class OptClass<T> extends ConstructType<[T] | []> {\n  constructor(protected _type: Type<T>) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitOpt(this, this._type, d);\n  }\n\n  public covariant(x: any): x is [T] | [] {\n    try {\n      if (Array.isArray(x) && (x.length === 0 || (x.length === 1 && this._type.covariant(x[0]))))\n        return true;\n    } catch (e: any) {\n      throw new Error(\n        `Invalid ${this.display()} argument: ${toReadableString(x)} \\n\\n-> ${e.message}`,\n      );\n    }\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: [T] | []) {\n    if (x.length === 0) {\n      return new Uint8Array([0]);\n    } else {\n      return concat(new Uint8Array([1]), this._type.encodeValue(x[0]));\n    }\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    this._type.buildTypeTable(typeTable);\n\n    const opCode = slebEncode(IDLTypeIds.Opt);\n    const buffer = this._type.encodeType(typeTable);\n    typeTable.add(this, concat(opCode, buffer));\n  }\n\n  public decodeValue(b: Pipe, t: Type): [T] | [] {\n    const opt = this.checkType(t);\n    if (!(opt instanceof OptClass)) {\n      throw new Error('Not an option type');\n    }\n    switch (safeReadUint8(b)) {\n      case 0:\n        return [];\n      case 1:\n        return [this._type.decodeValue(b, opt._type)];\n      default:\n        throw new Error('Not an option value');\n    }\n  }\n\n  get name() {\n    return `opt ${this._type.name}`;\n  }\n\n  public display() {\n    return `opt ${this._type.display()}`;\n  }\n\n  public valueToString(x: [T] | []) {\n    if (x.length === 0) {\n      return 'null';\n    } else {\n      return `opt ${this._type.valueToString(x[0])}`;\n    }\n  }\n}\n\n/**\n * Represents an IDL Record\n * @param {Object} [fields] - mapping of function name to Type\n */\nexport class RecordClass extends ConstructType<Record<string, any>> {\n  protected readonly _fields: Array<[string, Type]>;\n\n  constructor(fields: Record<string, Type> = {}) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitRecord(this, this._fields, d);\n  }\n\n  public tryAsTuple(): Type[] | null {\n    const res: Type[] = [];\n    for (let i = 0; i < this._fields.length; i++) {\n      const [key, type] = this._fields[i];\n      if (key !== `_${i}_`) {\n        return null;\n      }\n      res.push(type);\n    }\n    return res;\n  }\n\n  public covariant(x: any): x is Record<string, any> {\n    if (\n      typeof x === 'object' &&\n      this._fields.every(([k, t]) => {\n        // eslint-disable-next-line\n        if (!x.hasOwnProperty(k)) {\n          throw new Error(`Record is missing key \"${k}\".`);\n        }\n        try {\n          return t.covariant(x[k]);\n        } catch (e: any) {\n          throw new Error(`Invalid ${this.display()} argument: \\n\\nfield ${k} -> ${e.message}`);\n        }\n      })\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: Record<string, any>) {\n    const values = this._fields.map(([key]) => x[key]);\n    const bufs = zipWith(this._fields, values, ([, c], d) => c.encodeValue(d));\n    return concat(...bufs);\n  }\n\n  public _buildTypeTableImpl(T: TypeTable) {\n    this._fields.forEach(([_, value]) => value.buildTypeTable(T));\n    const opCode = slebEncode(IDLTypeIds.Record);\n    const len = lebEncode(this._fields.length);\n    const fields = this._fields.map(([key, value]) =>\n      concat(lebEncode(idlLabelToId(key)), value.encodeType(T)),\n    );\n\n    T.add(this, concat(opCode, len, concat(...fields)));\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    const record = this.checkType(t);\n    if (!(record instanceof RecordClass)) {\n      throw new Error('Not a record type');\n    }\n    const x: Record<string, any> = {};\n\n    let expectedRecordIdx = 0;\n    let actualRecordIdx = 0;\n    while (actualRecordIdx < record._fields.length) {\n      const [hash, type] = record._fields[actualRecordIdx];\n\n      if (expectedRecordIdx >= this._fields.length) {\n        // skip unexpected left over fields present on the wire\n        type.decodeValue(b, type);\n        actualRecordIdx++;\n        continue;\n      }\n\n      const [expectKey, expectType] = this._fields[expectedRecordIdx];\n      const expectedId = idlLabelToId(this._fields[expectedRecordIdx][0]);\n      const actualId = idlLabelToId(hash);\n      if (expectedId === actualId) {\n        // the current field on the wire matches the expected field\n        x[expectKey] = expectType.decodeValue(b, type);\n        expectedRecordIdx++;\n        actualRecordIdx++;\n      } else if (actualId > expectedId) {\n        // The expected field does not exist on the wire\n        if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n          x[expectKey] = [];\n          expectedRecordIdx++;\n        } else {\n          throw new Error('Cannot find required field ' + expectKey);\n        }\n      } else {\n        // The field on the wire does not exist in the output type, so we can skip it\n        type.decodeValue(b, type);\n        actualRecordIdx++;\n      }\n    }\n\n    // initialize left over expected optional fields\n    for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)) {\n      if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n        // TODO this assumes null value in opt is represented as []\n        x[expectKey] = [];\n      } else {\n        throw new Error('Cannot find required field ' + expectKey);\n      }\n    }\n    return x;\n  }\n\n  get name() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n    return `record {${fields.join('; ')}}`;\n  }\n\n  public display() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.display());\n    return `record {${fields.join('; ')}}`;\n  }\n\n  public valueToString(x: Record<string, any>) {\n    const values = this._fields.map(([key]) => x[key]);\n    const fields = zipWith(this._fields, values, ([k, c], d) => k + '=' + c.valueToString(d));\n    return `record {${fields.join('; ')}}`;\n  }\n}\n\n/**\n * Represents Tuple, a syntactic sugar for Record.\n * @param {Type} components\n */\nexport class TupleClass<T extends any[]> extends RecordClass {\n  protected readonly _components: Type[];\n\n  constructor(_components: Type[]) {\n    const x: Record<string, any> = {};\n    _components.forEach((e, i) => (x['_' + i + '_'] = e));\n    super(x);\n    this._components = _components;\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitTuple(this, this._components, d);\n  }\n\n  public covariant(x: any): x is T {\n    // `>=` because tuples can be covariant when encoded.\n\n    if (\n      Array.isArray(x) &&\n      x.length >= this._fields.length &&\n      this._components.every((t, i) => {\n        try {\n          return t.covariant(x[i]);\n        } catch (e: any) {\n          throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${i} -> ${e.message}`);\n        }\n      })\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: any[]) {\n    const bufs = zipWith(this._components, x, (c, d) => c.encodeValue(d));\n    return concat(...bufs);\n  }\n\n  public decodeValue(b: Pipe, t: Type): T {\n    const tuple = this.checkType(t);\n    if (!(tuple instanceof TupleClass)) {\n      throw new Error('not a tuple type');\n    }\n    if (tuple._components.length < this._components.length) {\n      throw new Error('tuple mismatch');\n    }\n    const res = [];\n    for (const [i, wireType] of tuple._components.entries()) {\n      if (i >= this._components.length) {\n        // skip value\n        wireType.decodeValue(b, wireType);\n      } else {\n        res.push(this._components[i].decodeValue(b, wireType));\n      }\n    }\n    return res as T;\n  }\n\n  public display() {\n    const fields = this._components.map(value => value.display());\n    return `record {${fields.join('; ')}}`;\n  }\n\n  public valueToString(values: any[]) {\n    const fields = zipWith(this._components, values, (c, d) => c.valueToString(d));\n    return `record {${fields.join('; ')}}`;\n  }\n}\n\n/**\n * Represents an IDL Variant\n * @param {Object} [fields] - mapping of function name to Type\n */\nexport class VariantClass extends ConstructType<Record<string, any>> {\n  private readonly _fields: Array<[string, Type]>;\n\n  constructor(fields: Record<string, Type> = {}) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitVariant(this, this._fields, d);\n  }\n\n  public covariant(x: any): x is Record<string, any> {\n    if (\n      typeof x === 'object' &&\n      Object.entries(x).length === 1 &&\n      this._fields.every(([k, v]) => {\n        try {\n          // eslint-disable-next-line\n          return !x.hasOwnProperty(k) || v.covariant(x[k]);\n        } catch (e: any) {\n          throw new Error(`Invalid ${this.display()} argument: \\n\\nvariant ${k} -> ${e.message}`);\n        }\n      })\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: Record<string, any>) {\n    for (let i = 0; i < this._fields.length; i++) {\n      const [name, type] = this._fields[i];\n      // eslint-disable-next-line\n      if (x.hasOwnProperty(name)) {\n        const idx = lebEncode(i);\n        const buf = type.encodeValue(x[name]);\n\n        return concat(idx, buf);\n      }\n    }\n    throw Error('Variant has no data: ' + x);\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    this._fields.forEach(([, type]) => {\n      type.buildTypeTable(typeTable);\n    });\n    const opCode = slebEncode(IDLTypeIds.Variant);\n    const len = lebEncode(this._fields.length);\n    const fields = this._fields.map(([key, value]) =>\n      concat(lebEncode(idlLabelToId(key)), value.encodeType(typeTable)),\n    );\n    typeTable.add(this, concat(opCode, len, ...fields));\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    const variant = this.checkType(t);\n    if (!(variant instanceof VariantClass)) {\n      throw new Error('Not a variant type');\n    }\n    const idx = Number(lebDecode(b));\n    if (idx >= variant._fields.length) {\n      throw Error('Invalid variant index: ' + idx);\n    }\n    const [wireHash, wireType] = variant._fields[idx];\n    for (const [key, expectType] of this._fields) {\n      if (idlLabelToId(wireHash) === idlLabelToId(key)) {\n        const value = expectType.decodeValue(b, wireType);\n        return { [key]: value };\n      }\n    }\n    throw new Error('Cannot find field hash ' + wireHash);\n  }\n\n  get name() {\n    const fields = this._fields.map(([key, type]) => key + ':' + type.name);\n    return `variant {${fields.join('; ')}}`;\n  }\n\n  public display() {\n    const fields = this._fields.map(\n      ([key, type]) => key + (type.name === 'null' ? '' : `:${type.display()}`),\n    );\n    return `variant {${fields.join('; ')}}`;\n  }\n\n  public valueToString(x: Record<string, any>) {\n    for (const [name, type] of this._fields) {\n      // eslint-disable-next-line\n      if (x.hasOwnProperty(name)) {\n        const value = type.valueToString(x[name]);\n        if (value === 'null') {\n          return `variant {${name}}`;\n        } else {\n          return `variant {${name}=${value}}`;\n        }\n      }\n    }\n    throw new Error('Variant has no data: ' + x);\n  }\n}\n\n/**\n * Represents a reference to an IDL type, used for defining recursive data\n * types.\n */\nexport class RecClass<T = any> extends ConstructType<T> {\n  private static _counter = 0;\n  private _id = RecClass._counter++;\n  private _type: ConstructType<T> | undefined = undefined;\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return v.visitRec(this, this._type, d);\n  }\n\n  public fill(t: ConstructType<T>) {\n    this._type = t;\n  }\n\n  public getType() {\n    return this._type;\n  }\n\n  public covariant(x: any): x is T {\n    if (this._type ? this._type.covariant(x) : false) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: T) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.encodeValue(x);\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    typeTable.add(this, new Uint8Array([]));\n    this._type.buildTypeTable(typeTable);\n    typeTable.merge(this, this._type.name);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.decodeValue(b, t);\n  }\n\n  get name() {\n    return `rec_${this._id}`;\n  }\n\n  public display() {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return `μ${this.name}.${this._type.name}`;\n  }\n\n  public valueToString(x: T) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.valueToString(x);\n  }\n}\n\nfunction decodePrincipalId(b: Pipe): PrincipalId {\n  const x = safeReadUint8(b);\n  if (x !== 1) {\n    throw new Error('Cannot decode principal');\n  }\n\n  const len = Number(lebDecode(b));\n  return PrincipalId.fromUint8Array(new Uint8Array(safeRead(b, len)));\n}\n\n/**\n * Represents an IDL principal reference\n */\nexport class PrincipalClass extends PrimitiveType<PrincipalId> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitPrincipal(this, d);\n  }\n\n  public covariant(x: any): x is PrincipalId {\n    if (x && x._isPrincipal) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: PrincipalId): ArrayBuffer {\n    const buf = x.toUint8Array();\n    const len = lebEncode(buf.byteLength);\n    return concat(new Uint8Array([1]), len, buf);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Principal);\n  }\n\n  public decodeValue(b: Pipe, t: Type): PrincipalId {\n    this.checkType(t);\n    return decodePrincipalId(b);\n  }\n\n  get name() {\n    return 'principal';\n  }\n  public valueToString(x: PrincipalId) {\n    return `${this.name} \"${x.toText()}\"`;\n  }\n}\n\n/**\n * Represents an IDL function reference.\n * @param argTypes Argument types.\n * @param retTypes Return types.\n * @param annotations Function annotations.\n */\nexport class FuncClass extends ConstructType<[PrincipalId, string]> {\n  public static argsToString(types: Type[], v: any[]) {\n    if (types.length !== v.length) {\n      throw new Error('arity mismatch');\n    }\n    return '(' + types.map((t, i) => t.valueToString(v[i])).join(', ') + ')';\n  }\n\n  constructor(public argTypes: Type[], public retTypes: Type[], public annotations: string[] = []) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFunc(this, d);\n  }\n  public covariant(x: any): x is [PrincipalId, string] {\n    if (Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string')\n      return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue([principal, methodName]: [PrincipalId, string]) {\n    const buf = principal.toUint8Array();\n    const len = lebEncode(buf.byteLength);\n    const canister = concat(new Uint8Array([1]), len, buf);\n\n    const method = new TextEncoder().encode(methodName);\n    const methodLen = lebEncode(method.byteLength);\n    return concat(new Uint8Array([1]), canister, methodLen, method);\n  }\n\n  public _buildTypeTableImpl(T: TypeTable) {\n    this.argTypes.forEach(arg => arg.buildTypeTable(T));\n    this.retTypes.forEach(arg => arg.buildTypeTable(T));\n\n    const opCode = slebEncode(IDLTypeIds.Func);\n    const argLen = lebEncode(this.argTypes.length);\n    const args = concat(...this.argTypes.map(arg => arg.encodeType(T)));\n    const retLen = lebEncode(this.retTypes.length);\n    const rets = concat(...this.retTypes.map(arg => arg.encodeType(T)));\n    const annLen = lebEncode(this.annotations.length);\n    const anns = concat(...this.annotations.map(a => this.encodeAnnotation(a)));\n\n    T.add(this, concat(opCode, argLen, args, retLen, rets, annLen, anns));\n  }\n\n  public decodeValue(b: Pipe): [PrincipalId, string] {\n    const x = safeReadUint8(b);\n    if (x !== 1) {\n      throw new Error('Cannot decode function reference');\n    }\n    const canister = decodePrincipalId(b);\n\n    const mLen = Number(lebDecode(b));\n    const buf = safeRead(b, mLen);\n    const decoder = new TextDecoder('utf8', { fatal: true });\n    const method = decoder.decode(buf);\n\n    return [canister, method];\n  }\n\n  get name() {\n    const args = this.argTypes.map(arg => arg.name).join(', ');\n    const rets = this.retTypes.map(arg => arg.name).join(', ');\n    const annon = ' ' + this.annotations.join(' ');\n    return `(${args}) -> (${rets})${annon}`;\n  }\n\n  public valueToString([principal, str]: [PrincipalId, string]) {\n    return `func \"${principal.toText()}\".${str}`;\n  }\n\n  public display(): string {\n    const args = this.argTypes.map(arg => arg.display()).join(', ');\n    const rets = this.retTypes.map(arg => arg.display()).join(', ');\n    const annon = ' ' + this.annotations.join(' ');\n    return `(${args}) → (${rets})${annon}`;\n  }\n\n  private encodeAnnotation(ann: string): ArrayBuffer {\n    if (ann === 'query') {\n      return new Uint8Array([1]);\n    } else if (ann === 'oneway') {\n      return new Uint8Array([2]);\n    } else {\n      throw new Error('Illegal function annotation');\n    }\n  }\n}\n\nexport class ServiceClass extends ConstructType<PrincipalId> {\n  public readonly _fields: Array<[string, FuncClass]>;\n  constructor(fields: Record<string, FuncClass>) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));\n  }\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitService(this, d);\n  }\n  public covariant(x: any): x is PrincipalId {\n    if (x && x._isPrincipal) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: PrincipalId) {\n    const buf = x.toUint8Array();\n    const len = lebEncode(buf.length);\n    return concat(new Uint8Array([1]), len, buf);\n  }\n\n  public _buildTypeTableImpl(T: TypeTable) {\n    this._fields.forEach(([_, func]) => func.buildTypeTable(T));\n    const opCode = slebEncode(IDLTypeIds.Service);\n    const len = lebEncode(this._fields.length);\n    const meths = this._fields.map(([label, func]) => {\n      const labelBuf = new TextEncoder().encode(label);\n      const labelLen = lebEncode(labelBuf.length);\n      return concat(labelLen, labelBuf, func.encodeType(T));\n    });\n\n    T.add(this, concat(opCode, len, ...meths));\n  }\n\n  public decodeValue(b: Pipe): PrincipalId {\n    return decodePrincipalId(b);\n  }\n  get name() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n    return `service {${fields.join('; ')}}`;\n  }\n\n  public valueToString(x: PrincipalId) {\n    return `service \"${x.toText()}\"`;\n  }\n}\n\n/**\n *\n * @param x\n * @returns {string}\n */\nfunction toReadableString(x: unknown): string {\n  const str = JSON.stringify(x, (_key, value) =>\n    typeof value === 'bigint' ? `BigInt(${value})` : value,\n  );\n\n  return str && str.length > toReadableString_max\n    ? str.substring(0, toReadableString_max - 3) + '...'\n    : str;\n}\n\n/**\n * Encode a array of values\n * @param argTypes\n * @param args\n * @returns {Buffer} serialised value\n */\nexport function encode(argTypes: Array<Type<any>>, args: any[]): ArrayBuffer {\n  if (args.length < argTypes.length) {\n    throw Error('Wrong number of message arguments');\n  }\n\n  const typeTable = new TypeTable();\n  argTypes.forEach(t => t.buildTypeTable(typeTable));\n\n  const magic = new TextEncoder().encode(magicNumber);\n  const table = typeTable.encode();\n  const len = lebEncode(args.length);\n  const typs = concat(...argTypes.map(t => t.encodeType(typeTable)));\n  const vals = concat(\n    ...zipWith(argTypes, args, (t, x) => {\n      try {\n        t.covariant(x);\n      } catch (e: any) {\n        const err = new Error(e.message + '\\n\\n');\n        throw err;\n      }\n\n      return t.encodeValue(x);\n    }),\n  );\n\n  return concat(magic, table, len, typs, vals);\n}\n\n/**\n * Decode a binary value\n * @param retTypes - Types expected in the buffer.\n * @param bytes - hex-encoded string, or buffer.\n * @returns Value deserialised to JS type\n */\nexport function decode(retTypes: Type[], bytes: ArrayBuffer): JsonValue[] {\n  const b = new Pipe(bytes);\n\n  if (bytes.byteLength < magicNumber.length) {\n    throw new Error('Message length smaller than magic number');\n  }\n  const magicBuffer = safeRead(b, magicNumber.length);\n  const magic = new TextDecoder().decode(magicBuffer);\n  if (magic !== magicNumber) {\n    throw new Error('Wrong magic number: ' + JSON.stringify(magic));\n  }\n\n  function readTypeTable(pipe: Pipe): [Array<[IDLTypeIds, any]>, number[]] {\n    const typeTable: Array<[IDLTypeIds, any]> = [];\n    const len = Number(lebDecode(pipe));\n\n    for (let i = 0; i < len; i++) {\n      const ty = Number(slebDecode(pipe));\n      switch (ty) {\n        case IDLTypeIds.Opt:\n        case IDLTypeIds.Vector: {\n          const t = Number(slebDecode(pipe));\n          typeTable.push([ty, t]);\n          break;\n        }\n        case IDLTypeIds.Record:\n        case IDLTypeIds.Variant: {\n          const fields = [];\n          let objectLength = Number(lebDecode(pipe));\n          let prevHash;\n          while (objectLength--) {\n            const hash = Number(lebDecode(pipe));\n            if (hash >= Math.pow(2, 32)) {\n              throw new Error('field id out of 32-bit range');\n            }\n            if (typeof prevHash === 'number' && prevHash >= hash) {\n              throw new Error('field id collision or not sorted');\n            }\n            prevHash = hash;\n            const t = Number(slebDecode(pipe));\n            fields.push([hash, t]);\n          }\n          typeTable.push([ty, fields]);\n          break;\n        }\n        case IDLTypeIds.Func: {\n          const args = [];\n          let argLength = Number(lebDecode(pipe));\n          while (argLength--) {\n            args.push(Number(slebDecode(pipe)));\n          }\n          const returnValues = [];\n          let returnValuesLength = Number(lebDecode(pipe));\n          while (returnValuesLength--) {\n            returnValues.push(Number(slebDecode(pipe)));\n          }\n          const annotations = [];\n          let annotationLength = Number(lebDecode(pipe));\n          while (annotationLength--) {\n            const annotation = Number(lebDecode(pipe));\n            switch (annotation) {\n              case 1: {\n                annotations.push('query');\n                break;\n              }\n              case 2: {\n                annotations.push('oneway');\n                break;\n              }\n              default:\n                throw new Error('unknown annotation');\n            }\n          }\n          typeTable.push([ty, [args, returnValues, annotations]]);\n          break;\n        }\n        case IDLTypeIds.Service: {\n          let servLength = Number(lebDecode(pipe));\n          const methods = [];\n          while (servLength--) {\n            const nameLength = Number(lebDecode(pipe));\n            const funcName = new TextDecoder().decode(safeRead(pipe, nameLength));\n            const funcType = slebDecode(pipe);\n            methods.push([funcName, funcType]);\n          }\n          typeTable.push([ty, methods]);\n          break;\n        }\n        default:\n          throw new Error('Illegal op_code: ' + ty);\n      }\n    }\n\n    const rawList: number[] = [];\n    const length = Number(lebDecode(pipe));\n    for (let i = 0; i < length; i++) {\n      rawList.push(Number(slebDecode(pipe)));\n    }\n    return [typeTable, rawList];\n  }\n  const [rawTable, rawTypes] = readTypeTable(b);\n  if (rawTypes.length < retTypes.length) {\n    throw new Error('Wrong number of return values');\n  }\n\n  const table: RecClass[] = rawTable.map(_ => Rec());\n  function getType(t: number): Type {\n    if (t < -24) {\n      throw new Error('future value not supported');\n    }\n    if (t < 0) {\n      switch (t) {\n        case -1:\n          return Null;\n        case -2:\n          return Bool;\n        case -3:\n          return Nat;\n        case -4:\n          return Int;\n        case -5:\n          return Nat8;\n        case -6:\n          return Nat16;\n        case -7:\n          return Nat32;\n        case -8:\n          return Nat64;\n        case -9:\n          return Int8;\n        case -10:\n          return Int16;\n        case -11:\n          return Int32;\n        case -12:\n          return Int64;\n        case -13:\n          return Float32;\n        case -14:\n          return Float64;\n        case -15:\n          return Text;\n        case -16:\n          return Reserved;\n        case -17:\n          return Empty;\n        case -24:\n          return Principal;\n        default:\n          throw new Error('Illegal op_code: ' + t);\n      }\n    }\n    if (t >= rawTable.length) {\n      throw new Error('type index out of range');\n    }\n    return table[t];\n  }\n  function buildType(entry: [IDLTypeIds, any]): Type {\n    switch (entry[0]) {\n      case IDLTypeIds.Vector: {\n        const ty = getType(entry[1]);\n        return Vec(ty);\n      }\n      case IDLTypeIds.Opt: {\n        const ty = getType(entry[1]);\n        return Opt(ty);\n      }\n      case IDLTypeIds.Record: {\n        const fields: Record<string, Type> = {};\n        for (const [hash, ty] of entry[1]) {\n          const name = `_${hash}_`;\n          fields[name] = getType(ty);\n        }\n        const record = Record(fields);\n        const tuple = record.tryAsTuple();\n        if (Array.isArray(tuple)) {\n          return Tuple(...tuple);\n        } else {\n          return record;\n        }\n      }\n      case IDLTypeIds.Variant: {\n        const fields: Record<string, Type> = {};\n        for (const [hash, ty] of entry[1]) {\n          const name = `_${hash}_`;\n          fields[name] = getType(ty);\n        }\n        return Variant(fields);\n      }\n      case IDLTypeIds.Func: {\n        const [args, returnValues, annotations] = entry[1];\n        return Func(\n          args.map((t: number) => getType(t)),\n          returnValues.map((t: number) => getType(t)),\n          annotations,\n        );\n      }\n      case IDLTypeIds.Service: {\n        const rec: Record<string, FuncClass> = {};\n        const methods = entry[1] as [[string, number]];\n        for (const [name, typeRef] of methods) {\n          let type: Type | undefined = getType(typeRef);\n\n          if (type instanceof RecClass) {\n            // unpack reference type\n            type = type.getType();\n          }\n          if (!(type instanceof FuncClass)) {\n            throw new Error('Illegal service definition: services can only contain functions');\n          }\n          rec[name] = type;\n        }\n        return Service(rec);\n      }\n      default:\n        throw new Error('Illegal op_code: ' + entry[0]);\n    }\n  }\n\n  rawTable.forEach((entry, i) => {\n    const t = buildType(entry);\n    table[i].fill(t);\n  });\n\n  const types = rawTypes.map(t => getType(t));\n  const output = retTypes.map((t, i) => {\n    return t.decodeValue(b, types[i]);\n  });\n\n  // skip unused values\n  for (let ind = retTypes.length; ind < types.length; ind++) {\n    types[ind].decodeValue(b, types[ind]);\n  }\n\n  if (b.byteLength > 0) {\n    throw new Error('decode: Left-over bytes');\n  }\n\n  return output;\n}\n\n/**\n * An Interface Factory, normally provided by a Candid code generation.\n */\nexport type InterfaceFactory = (idl: {\n  IDL: {\n    Empty: EmptyClass;\n    Reserved: ReservedClass;\n    Unknown: UnknownClass;\n    Bool: BoolClass;\n    Null: NullClass;\n    Text: TextClass;\n    Int: IntClass;\n    Nat: NatClass;\n\n    Float32: FloatClass;\n    Float64: FloatClass;\n\n    Int8: FixedIntClass;\n    Int16: FixedIntClass;\n    Int32: FixedIntClass;\n    Int64: FixedIntClass;\n\n    Nat8: FixedNatClass;\n    Nat16: FixedNatClass;\n    Nat32: FixedNatClass;\n    Nat64: FixedNatClass;\n\n    Principal: PrincipalClass;\n\n    Tuple: typeof Tuple;\n    Vec: typeof Vec;\n    Opt: typeof Opt;\n    Record: typeof Record;\n    Variant: typeof Variant;\n    Rec: typeof Rec;\n    Func: typeof Func;\n\n    Service(t: Record<string, FuncClass>): ServiceClass;\n  };\n}) => ServiceClass;\n\n// Export Types instances.\nexport const Empty = new EmptyClass();\nexport const Reserved = new ReservedClass();\n/**\n * Client-only type for deserializing unknown data. Not supported by Candid, and its use is discouraged.\n */\nexport const Unknown = new UnknownClass();\nexport const Bool = new BoolClass();\nexport const Null = new NullClass();\nexport const Text = new TextClass();\nexport const Int = new IntClass();\nexport const Nat = new NatClass();\n\nexport const Float32 = new FloatClass(32);\nexport const Float64 = new FloatClass(64);\n\nexport const Int8 = new FixedIntClass(8);\nexport const Int16 = new FixedIntClass(16);\nexport const Int32 = new FixedIntClass(32);\nexport const Int64 = new FixedIntClass(64);\n\nexport const Nat8 = new FixedNatClass(8);\nexport const Nat16 = new FixedNatClass(16);\nexport const Nat32 = new FixedNatClass(32);\nexport const Nat64 = new FixedNatClass(64);\n\nexport const Principal = new PrincipalClass();\n\n/**\n *\n * @param types array of any types\n * @returns TupleClass from those types\n */\nexport function Tuple<T extends any[]>(...types: T): TupleClass<T> {\n  return new TupleClass(types);\n}\n/**\n *\n * @param t IDL Type\n * @returns VecClass from that type\n */\nexport function Vec<T>(t: Type<T>): VecClass<T> {\n  return new VecClass(t);\n}\n/**\n *\n * @param t IDL Type\n * @returns OptClass of Type\n */\nexport function Opt<T>(t: Type<T>): OptClass<T> {\n  return new OptClass(t);\n}\n/**\n *\n * @param t Record of string and IDL Type\n * @returns RecordClass of string and Type\n */\nexport function Record(t: Record<string, Type>): RecordClass {\n  return new RecordClass(t);\n}\n\n/**\n *\n * @param fields Record of string and IDL Type\n * @returns VariantClass\n */\nexport function Variant(fields: Record<string, Type>): VariantClass {\n  return new VariantClass(fields);\n}\n/**\n *\n * @returns new RecClass\n */\nexport function Rec(): RecClass {\n  return new RecClass();\n}\n\n/**\n *\n * @param args array of IDL Types\n * @param ret array of IDL Types\n * @param annotations array of strings, [] by default\n * @returns new FuncClass\n */\nexport function Func(args: Type[], ret: Type[], annotations: string[] = []): FuncClass {\n  return new FuncClass(args, ret, annotations);\n}\n\n/**\n *\n * @param t Record of string and FuncClass\n * @returns ServiceClass\n */\nexport function Service(t: Record<string, FuncClass>): ServiceClass {\n  return new ServiceClass(t);\n}\n", "// tslint:disable:no-bitwise\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz234567';\n\n// Build a lookup table for decoding.\nconst lookupTable: Record<string, number> = Object.create(null);\nfor (let i = 0; i < alphabet.length; i++) {\n  lookupTable[alphabet[i]] = i;\n}\n\n// Add aliases for rfc4648.\nlookupTable['0'] = lookupTable.o;\nlookupTable['1'] = lookupTable.i;\n\n/**\n * @param input The input array to encode.\n * @returns A Base32 string encoding the input.\n */\nexport function encode(input: Uint8Array): string {\n  // How many bits will we skip from the first byte.\n  let skip = 0;\n  // 5 high bits, carry from one byte to the next.\n  let bits = 0;\n\n  // The output string in base32.\n  let output = '';\n\n  function encodeByte(byte: number) {\n    if (skip < 0) {\n      // we have a carry from the previous byte\n      bits |= byte >> -skip;\n    } else {\n      // no carry\n      bits = (byte << skip) & 248;\n    }\n\n    if (skip > 3) {\n      // Not enough data to produce a character, get us another one\n      skip -= 8;\n      return 1;\n    }\n\n    if (skip < 4) {\n      // produce a character\n      output += alphabet[bits >> 3];\n      skip += 5;\n    }\n\n    return 0;\n  }\n\n  for (let i = 0; i < input.length; ) {\n    i += encodeByte(input[i]);\n  }\n\n  return output + (skip < 0 ? alphabet[bits >> 3] : '');\n}\n\n/**\n * @param input The base32 encoded string to decode.\n */\nexport function decode(input: string): Uint8Array {\n  // how many bits we have from the previous character.\n  let skip = 0;\n  // current byte we're producing.\n  let byte = 0;\n\n  const output = new Uint8Array(((input.length * 4) / 3) | 0);\n  let o = 0;\n\n  function decodeChar(char: string) {\n    // Consume a character from the stream, store\n    // the output in this.output. As before, better\n    // to use update().\n    let val = lookupTable[char.toLowerCase()];\n    if (val === undefined) {\n      throw new Error(`Invalid character: ${JSON.stringify(char)}`);\n    }\n\n    // move to the high bits\n    val <<= 3;\n    byte |= val >>> skip;\n    skip += 5;\n\n    if (skip >= 8) {\n      // We have enough bytes to produce an output\n      output[o++] = byte;\n      skip -= 8;\n\n      if (skip > 0) {\n        byte = (val << (5 - skip)) & 255;\n      } else {\n        byte = 0;\n      }\n    }\n  }\n\n  for (const c of input) {\n    decodeChar(c);\n  }\n\n  return output.slice(0, o);\n}\n", "// tslint:disable:no-bitwise\n\n// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable: Uint32Array = new Uint32Array([\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n  0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n  0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n  0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n  0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n  0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n  0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n  0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n  0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n  0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n  0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n  0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n  0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n  0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n  0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n  0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n  0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n  0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n  0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n  0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n  0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n  0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n  0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n  0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n  0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n  0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n\n/**\n * Calculate the CRC32 of an ArrayBufferLike.\n * @param buf The BufferLike to calculate the CRC32 of.\n */\nexport function getCrc32(buf: ArrayBufferLike): number {\n  const b = new Uint8Array(buf);\n  let crc = -1;\n\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < b.length; i++) {\n    const byte = b[i];\n    const t = (byte ^ crc) & 0xff;\n    crc = lookUpTable[t] ^ (crc >>> 8);\n  }\n\n  return (crc ^ -1) >>> 0;\n}\n", "import { sha224 as jsSha224 } from 'js-sha256';\n\n/**\n * Returns the SHA224 hash of the buffer.\n * @param data Arraybuffer to encode\n */\nexport function sha224(data: ArrayBuffer): Uint8Array {\n  const shaObj = jsSha224.create();\n  shaObj.update(data);\n  return new Uint8Array(shaObj.array());\n}\n", "import { decode, encode } from './utils/base32';\nimport { getCrc32 } from './utils/getCrc';\nimport { sha224 } from './utils/sha224';\n\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\n\nconst MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR = 'aaaaa-aa';\n\nconst fromHexString = (hexString: string) =>\n  new Uint8Array((hexString.match(/.{1,2}/g) ?? []).map(byte => parseInt(byte, 16)));\n\nconst toHexString = (bytes: Uint8Array) =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\nexport class Principal {\n  public static anonymous(): Principal {\n    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n  }\n\n  /**\n   * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`\n   * @returns {Principal} principal of the management canister\n   */\n  public static managementCanister(): Principal {\n    return this.fromHex(MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR);\n  }\n\n  public static selfAuthenticating(publicKey: Uint8Array): Principal {\n    const sha = sha224(publicKey);\n    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n  }\n\n  public static from(other: unknown): Principal {\n    if (typeof other === 'string') {\n      return Principal.fromText(other);\n    } else if (\n      typeof other === 'object' &&\n      other !== null &&\n      (other as Principal)._isPrincipal === true\n    ) {\n      return new Principal((other as Principal)._arr);\n    }\n\n    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n  }\n\n  public static fromHex(hex: string): Principal {\n    return new this(fromHexString(hex));\n  }\n\n  public static fromText(text: string): Principal {\n    const canisterIdNoDash = text.toLowerCase().replace(/-/g, '');\n\n    let arr = decode(canisterIdNoDash);\n    arr = arr.slice(4, arr.length);\n\n    const principal = new this(arr);\n    if (principal.toText() !== text) {\n      throw new Error(\n        `Principal \"${principal.toText()}\" does not have a valid checksum (original value \"${text}\" may not be a valid Principal ID).`,\n      );\n    }\n\n    return principal;\n  }\n\n  public static fromUint8Array(arr: Uint8Array): Principal {\n    return new this(arr);\n  }\n\n  public readonly _isPrincipal = true;\n\n  protected constructor(private _arr: Uint8Array) {}\n\n  public isAnonymous(): boolean {\n    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this._arr;\n  }\n\n  public toHex(): string {\n    return toHexString(this._arr).toUpperCase();\n  }\n\n  public toText(): string {\n    const checksumArrayBuf = new ArrayBuffer(4);\n    const view = new DataView(checksumArrayBuf);\n    view.setUint32(0, getCrc32(this._arr));\n    const checksum = new Uint8Array(checksumArrayBuf);\n\n    const bytes = Uint8Array.from(this._arr);\n    const array = new Uint8Array([...checksum, ...bytes]);\n\n    const result = encode(array);\n    const matches = result.match(/.{1,5}/g);\n    if (!matches) {\n      // This should only happen if there's no character, which is unreachable.\n      throw new Error();\n    }\n    return matches.join('-');\n  }\n\n  public toString(): string {\n    return this.toText();\n  }\n\n  /**\n   * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification\n   * @param {Principal} other - a {@link Principal} to compare\n   * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than\n   */\n  public compareTo(other: Principal): 'lt' | 'eq' | 'gt' {\n    for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {\n      if (this._arr[i] < other._arr[i]) return 'lt';\n      else if (this._arr[i] > other._arr[i]) return 'gt';\n    }\n    // Here, at least one principal is a prefix of the other principal (they could be the same)\n    if (this._arr.length < other._arr.length) return 'lt';\n    if (this._arr.length > other._arr.length) return 'gt';\n    return 'eq';\n  }\n\n  /**\n   * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  public ltEq(other: Principal): boolean {\n    const cmp = this.compareTo(other);\n    return cmp == 'lt' || cmp == 'eq';\n  }\n\n  /**\n   * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  public gtEq(other: Principal): boolean {\n    const cmp = this.compareTo(other);\n    return cmp == 'gt' || cmp == 'eq';\n  }\n}\n", "/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat(...buffers: ArrayBuffer[]): ArrayBuffer {\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result;\n}\n\n/**\n * Returns an hexadecimal representation of an array buffer.\n * @param bytes The array buffer.\n */\nexport function toHexString(bytes: ArrayBuffer): string {\n  return new Uint8Array(bytes).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n\n/**\n * Return an array buffer from its hexadecimal representation.\n * @param hexString The hexadecimal string.\n */\nexport function fromHexString(hexString: string): ArrayBuffer {\n  return new Uint8Array((hexString.match(/.{1,2}/g) ?? []).map(byte => parseInt(byte, 16)));\n}\n\n/**\n * A class that abstracts a pipe-like ArrayBuffer.\n */\nexport class PipeArrayBuffer {\n  /**\n   * The reading view. It's a sliding window as we read and write, pointing to the buffer.\n   * @private\n   */\n  private _view: Uint8Array;\n\n  /**\n   * The actual buffer containing the bytes.\n   * @private\n   */\n  private _buffer: ArrayBuffer;\n\n  /**\n   * Creates a new instance of a pipe\n   * @param buffer an optional buffer to start with\n   * @param length an optional amount of bytes to use for the length.\n   */\n  constructor(buffer?: ArrayBuffer, length = buffer?.byteLength || 0) {\n    this._buffer = buffer || new ArrayBuffer(0);\n    this._view = new Uint8Array(this._buffer, 0, length);\n  }\n\n  get buffer(): ArrayBuffer {\n    // Return a copy of the buffer.\n    return this._view.slice();\n  }\n\n  get byteLength(): number {\n    return this._view.byteLength;\n  }\n\n  /**\n   * Read `num` number of bytes from the front of the pipe.\n   * @param num The number of bytes to read.\n   */\n  public read(num: number): ArrayBuffer {\n    const result = this._view.subarray(0, num);\n    this._view = this._view.subarray(num);\n    return result.slice().buffer;\n  }\n\n  public readUint8(): number | undefined {\n    const result = this._view[0];\n    this._view = this._view.subarray(1);\n    return result;\n  }\n\n  /**\n   * Write a buffer to the end of the pipe.\n   * @param buf The bytes to write.\n   */\n  public write(buf: ArrayBuffer): void {\n    const b = new Uint8Array(buf);\n    const offset = this._view.byteLength;\n    if (this._view.byteOffset + this._view.byteLength + b.byteLength >= this._buffer.byteLength) {\n      // Alloc grow the view to include the new bytes.\n      this.alloc(b.byteLength);\n    } else {\n      // Update the view to include the new bytes.\n      this._view = new Uint8Array(\n        this._buffer,\n        this._view.byteOffset,\n        this._view.byteLength + b.byteLength,\n      );\n    }\n\n    this._view.set(b, offset);\n  }\n\n  /**\n   * Whether or not there is more data to read from the buffer\n   */\n  public get end(): boolean {\n    return this._view.byteLength === 0;\n  }\n\n  /**\n   * Allocate a fixed amount of memory in the buffer. This does not affect the view.\n   * @param amount A number of bytes to add to the buffer.\n   */\n  public alloc(amount: number) {\n    // Add a little bit of exponential growth.\n    // tslint:disable-next-line:no-bitwise\n    const b = new ArrayBuffer(((this._buffer.byteLength + amount) * 1.2) | 0);\n    const v = new Uint8Array(b, 0, this._view.byteLength + amount);\n    v.set(this._view);\n    this._buffer = b;\n    this._view = v;\n  }\n}\n", "/**\n * Hashes a string to a number. Algorithm can be found here:\n * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf\n * @param s\n */\nfunction idlHash(s: string): number {\n  const utf8encoder = new TextEncoder();\n  const array = utf8encoder.encode(s);\n\n  let h = 0;\n  for (const c of array) {\n    h = (h * 223 + c) % 2 ** 32;\n  }\n  return h;\n}\n\n/**\n *\n * @param label string\n * @returns number representing hashed label\n */\nexport function idlLabelToId(label: string): number {\n  if (/^_\\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {\n    const num = +label.slice(1, -1);\n    if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {\n      return num;\n    }\n  }\n  return idlHash(label);\n}\n", "/* eslint-disable no-constant-condition */\n// tslint:disable:no-bitwise\n// Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer\n//       implementation, which isn't compatible with the NPM buffer package\n//       which we use everywhere else. This means that we have to transform\n//       one into the other, hence why every function that returns a Buffer\n//       actually return `new Buffer(pipe.buffer)`.\n// TODO: The best solution would be to have our own buffer type around\n//       Uint8Array which is standard.\nimport { PipeArrayBuffer as Pipe } from './buffer';\n\nfunction eob(): never {\n  throw new Error('unexpected end of buffer');\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param num number\n * @returns Buffer\n */\nexport function safeRead(pipe: Pipe, num: number): ArrayBuffer {\n  if (pipe.byteLength < num) {\n    eob();\n  }\n  return pipe.read(num);\n}\n\n/**\n * @param pipe\n */\nexport function safeReadUint8(pipe: Pipe): number {\n  const byte = pipe.readUint8();\n  if (byte === undefined) {\n    eob();\n  }\n  return byte;\n}\n\n/**\n * Encode a positive number (or bigint) into a Buffer. The number will be floored to the\n * nearest integer.\n * @param value The number to encode.\n */\nexport function lebEncode(value: bigint | number): ArrayBuffer {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n\n  if (value < BigInt(0)) {\n    throw new Error('Cannot leb encode negative values.');\n  }\n\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = Number(value & BigInt(0x7f));\n    value /= BigInt(0x80);\n    if (value === BigInt(0)) {\n      pipe.write(new Uint8Array([i]));\n      break;\n    } else {\n      pipe.write(new Uint8Array([i | 0x80]));\n    }\n  }\n\n  return pipe.buffer;\n}\n\n/**\n * Decode a leb encoded buffer into a bigint. The number will always be positive (does not\n * support signed leb encoding).\n * @param pipe A Buffer containing the leb encoded bits.\n */\nexport function lebDecode(pipe: Pipe): bigint {\n  let weight = BigInt(1);\n  let value = BigInt(0);\n  let byte;\n\n  do {\n    byte = safeReadUint8(pipe);\n    value += BigInt(byte & 0x7f).valueOf() * weight;\n    weight *= BigInt(128);\n  } while (byte >= 0x80);\n\n  return value;\n}\n\n/**\n * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number\n * will be floored to the nearest integer.\n * @param value The number to encode.\n */\nexport function slebEncode(value: bigint | number): ArrayBuffer {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n\n  const isNeg = value < BigInt(0);\n  if (isNeg) {\n    value = -value - BigInt(1);\n  }\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = getLowerBytes(value);\n    value /= BigInt(0x80);\n\n    // prettier-ignore\n    if (   ( isNeg && value === BigInt(0) && (i & 0x40) !== 0)\n          || (!isNeg && value === BigInt(0) && (i & 0x40) === 0)) {\n        pipe.write(new Uint8Array([i]));\n        break;\n      } else {\n        pipe.write(new Uint8Array([i | 0x80]));\n      }\n  }\n\n  function getLowerBytes(num: bigint): number {\n    const bytes = num % BigInt(0x80);\n    if (isNeg) {\n      // We swap the bits here again, and remove 1 to do two's complement.\n      return Number(BigInt(0x80) - bytes - BigInt(1));\n    } else {\n      return Number(bytes);\n    }\n  }\n  return pipe.buffer;\n}\n\n/**\n * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative\n * signed-leb encoding.\n * @param pipe A Buffer containing the signed leb encoded bits.\n */\nexport function slebDecode(pipe: Pipe): bigint {\n  // Get the size of the buffer, then cut a buffer of that size.\n  const pipeView = new Uint8Array(pipe.buffer);\n  let len = 0;\n  for (; len < pipeView.byteLength; len++) {\n    if (pipeView[len] < 0x80) {\n      // If it's a positive number, we reuse lebDecode.\n      if ((pipeView[len] & 0x40) === 0) {\n        return lebDecode(pipe);\n      }\n      break;\n    }\n  }\n\n  const bytes = new Uint8Array(safeRead(pipe, len + 1));\n  let value = BigInt(0);\n  for (let i = bytes.byteLength - 1; i >= 0; i--) {\n    value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);\n  }\n  return -value - BigInt(1);\n}\n\n/**\n *\n * @param value bigint or number\n * @param byteLength number\n * @returns Buffer\n */\nexport function writeUIntLE(value: bigint | number, byteLength: number): ArrayBuffer {\n  if (BigInt(value) < BigInt(0)) {\n    throw new Error('Cannot write negative values.');\n  }\n  return writeIntLE(value, byteLength);\n}\n\n/**\n *\n * @param value\n * @param byteLength\n */\nexport function writeIntLE(value: bigint | number, byteLength: number): ArrayBuffer {\n  value = BigInt(value);\n\n  const pipe = new Pipe(new ArrayBuffer(Math.min(1, byteLength)), 0);\n  let i = 0;\n  let mul = BigInt(256);\n  let sub = BigInt(0);\n  let byte = Number(value % mul);\n  pipe.write(new Uint8Array([byte]));\n  while (++i < byteLength) {\n    if (value < 0 && sub === BigInt(0) && byte !== 0) {\n      sub = BigInt(1);\n    }\n    byte = Number((value / mul - sub) % BigInt(256));\n    pipe.write(new Uint8Array([byte]));\n    mul *= BigInt(256);\n  }\n\n  return pipe.buffer;\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readUIntLE(pipe: Pipe, byteLength: number): bigint {\n  let val = BigInt(safeReadUint8(pipe));\n  let mul = BigInt(1);\n  let i = 0;\n  while (++i < byteLength) {\n    mul *= BigInt(256);\n    const byte = BigInt(safeReadUint8(pipe));\n    val = val + mul * byte;\n  }\n  return val;\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readIntLE(pipe: Pipe, byteLength: number): bigint {\n  let val = readUIntLE(pipe, byteLength);\n  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));\n  if (val >= mul) {\n    val -= mul * BigInt(2);\n  }\n  return val;\n}\n", "/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n *\n * @param n bigint or integer\n * @returns integer\n */\nexport function ilog2(n: bigint | number): number {\n  const nBig = BigInt(n);\n  if (n <= 0) {\n    throw new RangeError('Input must be positive');\n  }\n  return nBig.toString(2).length - 1;\n}\n\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n *\n * @param n bigint or integer\n * @returns bigint\n */\nexport function iexp2(n: bigint | number): bigint {\n  const nBig = BigInt(n);\n  if (n < 0) {\n    throw new RangeError('Input must be non-negative');\n  }\n  return BigInt(1) << nBig;\n}\n", "/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n *\n * @todo https://github.com/dfinity/agent-js/issues/420\n */\nexport class AgentError extends Error {\n  constructor(public readonly message: string) {\n    super(message);\n    Object.setPrototypeOf(this, AgentError.prototype);\n  }\n}\n", "// tslint:disable:max-classes-per-file\n// This file is based on:\n// tslint:disable-next-line: max-line-length\n// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses\nimport borc from 'borc';\nimport * as cbor from 'simple-cbor';\nimport { CborEncoder, SelfDescribeCborSerializer } from 'simple-cbor';\nimport { Principal } from '@dfinity/principal';\nimport { concat, fromHex } from './utils/buffer';\n\n// We are using hansl/simple-cbor for CBOR serialization, to avoid issues with\n// encoding the uint64 values that the HTTP handler of the client expects for\n// canister IDs. However, simple-cbor does not yet provide deserialization so\n// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR\n// decoder.\n\nclass PrincipalEncoder implements CborEncoder<Principal> {\n  public get name() {\n    return 'Principal';\n  }\n\n  public get priority() {\n    return 0;\n  }\n\n  public match(value: any): boolean {\n    return value && value._isPrincipal === true;\n  }\n\n  public encode(v: Principal): cbor.CborValue {\n    return cbor.value.bytes(v.toUint8Array());\n  }\n}\n\nclass BufferEncoder implements CborEncoder<ArrayBuffer> {\n  public get name() {\n    return 'Buffer';\n  }\n\n  public get priority() {\n    return 1;\n  }\n\n  public match(value: any): boolean {\n    return value instanceof ArrayBuffer || ArrayBuffer.isView(value);\n  }\n\n  public encode(v: ArrayBuffer): cbor.CborValue {\n    return cbor.value.bytes(new Uint8Array(v));\n  }\n}\n\nclass BigIntEncoder implements CborEncoder<BigInt> {\n  public get name() {\n    return 'BigInt';\n  }\n\n  public get priority() {\n    return 1;\n  }\n\n  public match(value: any): boolean {\n    return typeof value === `bigint`;\n  }\n\n  public encode(v: bigint): cbor.CborValue {\n    // Always use a bigint encoding.\n    if (v > BigInt(0)) {\n      return cbor.value.tagged(2, cbor.value.bytes(fromHex(v.toString(16))));\n    } else {\n      return cbor.value.tagged(3, cbor.value.bytes(fromHex((BigInt('-1') * v).toString(16))));\n    }\n  }\n}\n\nconst serializer = SelfDescribeCborSerializer.withDefaultEncoders(true);\nserializer.addEncoder(new PrincipalEncoder());\nserializer.addEncoder(new BufferEncoder());\nserializer.addEncoder(new BigIntEncoder());\n\nexport enum CborTag {\n  Uint64LittleEndian = 71,\n  Semantic = 55799,\n}\n\n/**\n * Encode a JavaScript value into CBOR.\n */\nexport function encode(value: any): ArrayBuffer {\n  return serializer.serialize(value);\n}\n\nfunction decodePositiveBigInt(buf: Uint8Array): bigint {\n  const len = buf.byteLength;\n  let res = BigInt(0);\n  for (let i = 0; i < len; i++) {\n    // tslint:disable-next-line:no-bitwise\n    res = res * BigInt(0x100) + BigInt(buf[i]);\n  }\n\n  return res;\n}\n\n// A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.\nclass Uint8ArrayDecoder extends borc.Decoder {\n  public createByteString(raw: ArrayBuffer[]): ArrayBuffer {\n    return concat(...raw);\n  }\n\n  public createByteStringFromHeap(start: number, end: number): ArrayBuffer {\n    if (start === end) {\n      return new ArrayBuffer(0);\n    }\n\n    return new Uint8Array((this as any)._heap.slice(start, end));\n  }\n}\n\nexport function decode<T>(input: ArrayBuffer): T {\n  const buffer = new Uint8Array(input);\n  const decoder = new Uint8ArrayDecoder({\n    size: buffer.byteLength,\n    tags: {\n      // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).\n      2: val => decodePositiveBigInt(val),\n      3: val => -decodePositiveBigInt(val),\n      [CborTag.Semantic]: (value: T): T => value,\n    },\n  });\n\n  return decoder.decodeFirst(buffer);\n}\n", "/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat(...buffers: ArrayBuffer[]): ArrayBuffer {\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result.buffer;\n}\n\n/**\n * Transforms a buffer to an hexadecimal string. This will use the buffer as an Uint8Array.\n * @param buffer The buffer to return the hexadecimal string of.\n */\nexport function toHex(buffer: ArrayBuffer): string {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n}\n\nconst hexRe = new RegExp(/^([0-9A-F]{2})*$/i);\n\n/**\n * Transforms a hexadecimal string into an array buffer.\n * @param hex The hexadecimal string to use.\n */\nexport function fromHex(hex: string): ArrayBuffer {\n  if (!hexRe.test(hex)) {\n    throw new Error('Invalid hexadecimal string.');\n  }\n  const buffer = [...hex]\n    .reduce((acc, curr, i) => {\n      // tslint:disable-next-line:no-bitwise\n      acc[(i / 2) | 0] = (acc[(i / 2) | 0] || '') + curr;\n      return acc;\n    }, [] as string[])\n    .map(x => Number.parseInt(x, 16));\n\n  return new Uint8Array(buffer).buffer;\n}\n\nexport function compare(b1: ArrayBuffer, b2: ArrayBuffer): number {\n  if (b1.byteLength !== b2.byteLength) {\n    return b1.byteLength - b2.byteLength;\n  }\n\n  const u1 = new Uint8Array(b1);\n  const u2 = new Uint8Array(b2);\n  for (let i = 0; i < u1.length; i++) {\n    if (u1[i] !== u2[i]) {\n      return u1[i] - u2[i];\n    }\n  }\n  return 0;\n}\n", "import { lebEncode } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport borc from 'borc';\nimport { sha256 as jsSha256 } from 'js-sha256';\nimport { compare, concat } from './utils/buffer';\n\nexport type RequestId = ArrayBuffer & { __requestId__: void };\n\n/**\n * sha256 hash the provided Buffer\n * @param data - input to hash function\n */\nexport function hash(data: ArrayBuffer): ArrayBuffer {\n  return jsSha256.create().update(new Uint8Array(data)).arrayBuffer();\n}\n\ninterface ToHashable {\n  toHash(): unknown;\n}\n\n/**\n *\n * @param value unknown value\n * @returns ArrayBuffer\n */\nexport function hashValue(value: unknown): ArrayBuffer {\n  if (value instanceof borc.Tagged) {\n    return hashValue(value.value);\n  } else if (typeof value === 'string') {\n    return hashString(value);\n  } else if (typeof value === 'number') {\n    return hash(lebEncode(value));\n  } else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n    return hash(value as ArrayBuffer);\n  } else if (Array.isArray(value)) {\n    const vals = value.map(hashValue);\n    return hash(concat(...vals));\n  } else if (value && typeof value === 'object' && (value as any)._isPrincipal) {\n    return hash((value as Principal).toUint8Array());\n  } else if (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof (value as ToHashable).toHash === 'function'\n  ) {\n    return hashValue((value as ToHashable).toHash());\n    // TODO This should be move to a specific async method as the webauthn flow required\n    // the flow to be synchronous to ensure Safari touch id works.\n    // } else if (value instanceof Promise) {\n    //   return value.then(x => hashValue(x));\n  } else if (typeof value === 'bigint') {\n    // Do this check much later than the other bigint check because this one is much less\n    // type-safe.\n    // So we want to try all the high-assurance type guards before this 'probable' one.\n    return hash(lebEncode(value));\n  }\n  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {\n    // include so logs/callers can understand the confusing value.\n    // (when stringified in error message, prototype info is lost)\n    value,\n  });\n}\n\nconst hashString = (value: string): ArrayBuffer => {\n  const encoded = new TextEncoder().encode(value);\n  return hash(encoded);\n};\n\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function requestIdOf(request: Record<string, any>): RequestId {\n  const hashed: Array<[ArrayBuffer, ArrayBuffer]> = Object.entries(request)\n    .filter(([, value]) => value !== undefined)\n    .map(([key, value]: [string, unknown]) => {\n      const hashedKey = hashString(key);\n      const hashedValue = hashValue(value);\n\n      return [hashedKey, hashedValue] as [ArrayBuffer, ArrayBuffer];\n    });\n\n  const traversed: Array<[ArrayBuffer, ArrayBuffer]> = hashed;\n\n  const sorted: Array<[ArrayBuffer, ArrayBuffer]> = traversed.sort(([k1], [k2]) => {\n    return compare(k1, k2);\n  });\n\n  const concatenated: ArrayBuffer = concat(...sorted.map(x => concat(...x)));\n  const requestId = hash(concatenated) as RequestId;\n  return requestId;\n}\n", "import * as base64Arraybuffer from 'base64-arraybuffer';\n\n// This WASM is generated from the miracl BLS Rust code (see\n// https://github.com/dfinity/miracl_core_bls12381/)\nimport { wasmBytesBase64 } from './wasm';\n\n/* tslint:disable */\n/* eslint-disable */\nlet wasm: InitOutput;\n\nconst wasmBytes = base64Arraybuffer.decode(wasmBytesBase64);\n\n/**\n * @returns {number}\n */\nexport function bls_init() {\n  let ret = wasm.bls_init();\n  return ret;\n}\n\nlet cachegetUint8Memory0: any = null;\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachegetUint8Memory0;\n}\n\nfunction passArray8ToWasm0(arg: any, malloc: any): [number, number] {\n  const ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  return [ptr, arg.length];\n}\n\n/**\n * @param {Uint8Array} sig\n * @param {Uint8Array} m\n * @param {Uint8Array} w\n * @returns {number}\n */\nexport function bls_verify(sig: Uint8Array, m: Uint8Array, w: Uint8Array): number {\n  const [ptr0, len0] = passArray8ToWasm0(sig, wasm.__wbindgen_malloc);\n  const [ptr1, len1] = passArray8ToWasm0(m, wasm.__wbindgen_malloc);\n  const [ptr2, len2] = passArray8ToWasm0(w, wasm.__wbindgen_malloc);\n\n  const ret = wasm.bls_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret;\n}\n\nasync function load(module: any, imports: any) {\n  if (typeof Response === 'function' && module instanceof Response) {\n    const bytes = await module.arrayBuffer();\n    return await WebAssembly.instantiate(bytes, imports);\n  } else {\n    const instance = await WebAssembly.instantiate(module, imports);\n\n    if (instance instanceof WebAssembly.Instance) {\n      return { instance, module };\n    } else {\n      return instance;\n    }\n  }\n}\n\nasync function init(): Promise<InitOutput> {\n  const imports = {};\n  const { instance, module } = await load(wasmBytes, imports);\n\n  wasm = instance.exports as any as InitOutput;\n  (init as any).__wbindgen_wasm_module = module;\n\n  return wasm;\n}\n\nexport type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;\n\nexport interface InitOutput {\n  readonly memory: WebAssembly.Memory;\n  readonly bls_init: () => number;\n  readonly bls_verify: (a: number, b: number, c: number, d: number, e: number, f: number) => number;\n  readonly __wbindgen_malloc: (a: number) => number;\n}\n\n/**\n * If `module_or_path` is {RequestInfo} or {URL}, makes a request and\n * for everything else, calls `WebAssembly.instantiate` directly.\n *\n * @param {InitInput | Promise<InitInput>} module_or_path\n *\n * @returns {Promise<InitOutput>}\n */\nexport default init;\n", "export const wasmBytesBase64 = ``;\n", "import init, { bls_init, bls_verify } from '../vendor/bls/bls';\n\nexport let verify: (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => boolean;\n\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns Promise resolving a boolean\n */\nexport async function blsVerify(\n  pk: Uint8Array,\n  sig: Uint8Array,\n  msg: Uint8Array,\n): Promise<boolean> {\n  if (!verify) {\n    await init();\n    if (bls_init() !== 0) {\n      throw new Error('Cannot initialize BLS');\n    }\n    verify = (pk1, sig1, msg1) => {\n      // Reorder things from what the WASM expects (sig, m, w).\n      return bls_verify(sig1, msg1, pk1) === 0;\n    };\n  }\n  return verify(pk, sig, msg);\n}\n", "import * as cbor from './cbor';\nimport { AgentError } from './errors';\nimport { hash } from './request_id';\nimport { concat, fromHex, toHex } from './utils/buffer';\nimport { Principal } from '@dfinity/principal';\nimport * as bls from './utils/bls';\n\n/**\n * A certificate may fail verification with respect to the provided public key\n */\nexport class CertificateVerificationError extends AgentError {\n  constructor(reason: string) {\n    super(`Invalid certificate: ${reason}`);\n  }\n}\n\ninterface Cert {\n  tree: HashTree;\n  signature: ArrayBuffer;\n  delegation?: Delegation;\n}\n\nconst enum NodeId {\n  Empty = 0,\n  Fork = 1,\n  Labeled = 2,\n  Leaf = 3,\n  Pruned = 4,\n}\n\nexport type HashTree =\n  | [NodeId.Empty]\n  | [NodeId.Fork, HashTree, HashTree]\n  | [NodeId.Labeled, ArrayBuffer, HashTree]\n  | [NodeId.Leaf, ArrayBuffer]\n  | [NodeId.Pruned, ArrayBuffer];\n\n/**\n * Make a human readable string out of a hash tree.\n * @param tree\n */\nexport function hashTreeToString(tree: HashTree): string {\n  const indent = (s: string) =>\n    s\n      .split('\\n')\n      .map(x => '  ' + x)\n      .join('\\n');\n  function labelToString(label: ArrayBuffer): string {\n    const decoder = new TextDecoder(undefined, { fatal: true });\n    try {\n      return JSON.stringify(decoder.decode(label));\n    } catch (e) {\n      return `data(...${label.byteLength} bytes)`;\n    }\n  }\n\n  switch (tree[0]) {\n    case NodeId.Empty:\n      return '()';\n    case NodeId.Fork: {\n      const left = hashTreeToString(tree[1]);\n      const right = hashTreeToString(tree[2]);\n      return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n    }\n    case NodeId.Labeled: {\n      const label = labelToString(tree[1]);\n      const sub = hashTreeToString(tree[2]);\n      return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n    }\n    case NodeId.Leaf: {\n      return `leaf(...${tree[1].byteLength} bytes)`;\n    }\n    case NodeId.Pruned: {\n      return `pruned(${toHex(new Uint8Array(tree[1]))}`;\n    }\n    default: {\n      return `unknown(${JSON.stringify(tree[0])})`;\n    }\n  }\n}\n\ninterface Delegation extends Record<string, any> {\n  subnet_id: ArrayBuffer;\n  certificate: ArrayBuffer;\n}\n\nfunction isBufferEqual(a: ArrayBuffer, b: ArrayBuffer): boolean {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  const a8 = new Uint8Array(a);\n  const b8 = new Uint8Array(b);\n  for (let i = 0; i < a8.length; i++) {\n    if (a8[i] !== b8[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype VerifyFunc = (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => Promise<boolean>;\n\nexport interface CreateCertificateOptions {\n  /**\n   * The bytes encoding the certificate to be verified\n   */\n  certificate: ArrayBuffer;\n  /**\n   * The root key against which to verify the certificate\n   * (normally, the root key of the IC main network)\n   */\n  rootKey: ArrayBuffer;\n  /**\n   * The effective canister ID of the request when verifying a response, or\n   * the signing canister ID when verifying a certified variable.\n   */\n  canisterId: Principal;\n  /**\n   * BLS Verification strategy. Default strategy uses wasm for performance, but that may not be available in all contexts.\n   */\n  blsVerify?: VerifyFunc;\n}\n\nexport class Certificate {\n  private readonly cert: Cert;\n\n  /**\n   * Create a new instance of a certificate, automatically verifying it. Throws a\n   * CertificateVerificationError if the certificate cannot be verified.\n   * @constructs {@link AuthClient}\n   * @param {CreateCertificateOptions} options\n   * @see {@link CreateCertificateOptions}\n   * @param {ArrayBuffer} options.certificate The bytes of the certificate\n   * @param {ArrayBuffer} options.rootKey The root key to verify against\n   * @param {Principal} options.canisterId The effective or signing canister ID\n   * @throws {CertificateVerificationError}\n   */\n  public static async create(options: CreateCertificateOptions): Promise<Certificate> {\n    let blsVerify = options.blsVerify;\n    if (!blsVerify) {\n      blsVerify = bls.blsVerify;\n    }\n    const cert = new Certificate(\n      options.certificate,\n      options.rootKey,\n      options.canisterId,\n      blsVerify,\n    );\n    await cert.verify();\n    return cert;\n  }\n\n  private constructor(\n    certificate: ArrayBuffer,\n    private _rootKey: ArrayBuffer,\n    private _canisterId: Principal,\n    private _blsVerify: VerifyFunc,\n  ) {\n    this.cert = cbor.decode(new Uint8Array(certificate));\n  }\n\n  public lookup(path: Array<ArrayBuffer | string>): ArrayBuffer | undefined {\n    return lookup_path(path, this.cert.tree);\n  }\n\n  private async verify(): Promise<void> {\n    const rootHash = await reconstruct(this.cert.tree);\n    const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n    const sig = this.cert.signature;\n    const key = extractDER(derKey);\n    const msg = concat(domain_sep('ic-state-root'), rootHash);\n    let sigVer = false;\n    try {\n      sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));\n    } catch (err) {\n      sigVer = false;\n    }\n    if (!sigVer) {\n      throw new CertificateVerificationError('Signature verification failed');\n    }\n  }\n\n  private async _checkDelegationAndGetKey(d?: Delegation): Promise<ArrayBuffer> {\n    if (!d) {\n      return this._rootKey;\n    }\n    const cert: Certificate = await Certificate.create({\n      certificate: d.certificate,\n      rootKey: this._rootKey,\n      canisterId: this._canisterId,\n    });\n\n    const rangeLookup = cert.lookup(['subnet', d.subnet_id, 'canister_ranges']);\n    if (!rangeLookup) {\n      throw new CertificateVerificationError(\n        `Could not find canister ranges for subnet 0x${toHex(d.subnet_id)}`,\n      );\n    }\n    const ranges_arr: Array<[Uint8Array, Uint8Array]> = cbor.decode(rangeLookup);\n    const ranges: Array<[Principal, Principal]> = ranges_arr.map(v => [\n      Principal.fromUint8Array(v[0]),\n      Principal.fromUint8Array(v[1]),\n    ]);\n\n    const canisterInRange = ranges.some(\n      r => r[0].ltEq(this._canisterId) && r[1].gtEq(this._canisterId),\n    );\n    if (!canisterInRange) {\n      throw new CertificateVerificationError(\n        `Canister ${this._canisterId} not in range of delegations for subnet 0x${toHex(\n          d.subnet_id,\n        )}`,\n      );\n    }\n    const publicKeyLookup = cert.lookup(['subnet', d.subnet_id, 'public_key']);\n    if (!publicKeyLookup) {\n      throw new Error(`Could not find subnet key for subnet 0x${toHex(d.subnet_id)}`);\n    }\n    return publicKeyLookup;\n  }\n}\n\nconst DER_PREFIX = fromHex(\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100',\n);\nconst KEY_LENGTH = 96;\n\nfunction extractDER(buf: ArrayBuffer): ArrayBuffer {\n  const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n  if (buf.byteLength !== expectedLength) {\n    throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);\n  }\n  const prefix = buf.slice(0, DER_PREFIX.byteLength);\n  if (!isBufferEqual(prefix, DER_PREFIX)) {\n    throw new TypeError(\n      `BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`,\n    );\n  }\n\n  return buf.slice(DER_PREFIX.byteLength);\n}\n\n/**\n * @param t\n */\nexport async function reconstruct(t: HashTree): Promise<ArrayBuffer> {\n  switch (t[0]) {\n    case NodeId.Empty:\n      return hash(domain_sep('ic-hashtree-empty'));\n    case NodeId.Pruned:\n      return t[1] as ArrayBuffer;\n    case NodeId.Leaf:\n      return hash(concat(domain_sep('ic-hashtree-leaf'), t[1] as ArrayBuffer));\n    case NodeId.Labeled:\n      return hash(\n        concat(\n          domain_sep('ic-hashtree-labeled'),\n          t[1] as ArrayBuffer,\n          await reconstruct(t[2] as HashTree),\n        ),\n      );\n    case NodeId.Fork:\n      return hash(\n        concat(\n          domain_sep('ic-hashtree-fork'),\n          await reconstruct(t[1] as HashTree),\n          await reconstruct(t[2] as HashTree),\n        ),\n      );\n    default:\n      throw new Error('unreachable');\n  }\n}\n\nfunction domain_sep(s: string): ArrayBuffer {\n  const len = new Uint8Array([s.length]);\n  const str = new TextEncoder().encode(s);\n  return concat(len, str);\n}\n\n/**\n * @param path\n * @param tree\n */\nexport function lookup_path(\n  path: Array<ArrayBuffer | string>,\n  tree: HashTree,\n): ArrayBuffer | undefined {\n  if (path.length === 0) {\n    switch (tree[0]) {\n      case NodeId.Leaf: {\n        return new Uint8Array(tree[1]).buffer;\n      }\n      default: {\n        return undefined;\n      }\n    }\n  }\n\n  const label = typeof path[0] === 'string' ? new TextEncoder().encode(path[0]) : path[0];\n  const t = find_label(label, flatten_forks(tree));\n  if (t) {\n    return lookup_path(path.slice(1), t);\n  }\n}\nfunction flatten_forks(t: HashTree): HashTree[] {\n  switch (t[0]) {\n    case NodeId.Empty:\n      return [];\n    case NodeId.Fork:\n      return flatten_forks(t[1] as HashTree).concat(flatten_forks(t[2] as HashTree));\n    default:\n      return [t];\n  }\n}\nfunction find_label(l: ArrayBuffer, trees: HashTree[]): HashTree | undefined {\n  if (trees.length === 0) {\n    return undefined;\n  }\n  for (const t of trees) {\n    if (t[0] === NodeId.Labeled) {\n      const p = t[1] as ArrayBuffer;\n      if (isBufferEqual(l, p)) {\n        return t[2];\n      }\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAAAA;EAAA;;;;;;;;;;;;;;;;;;;;;gBAAAC;EAAA,cAAAC;;;;ACCA,IAAM,WAAW;AAGjB,IAAM,cAAsC,uBAAO,OAAO,IAAI;AAC9D,SAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,cAAY,SAAS,CAAC,CAAC,IAAI;;AAI7B,YAAY,GAAG,IAAI,YAAY;AAC/B,YAAY,GAAG,IAAI,YAAY;AAMzB,SAAU,OAAO,OAAiB;AAEtC,MAAI,OAAO;AAEX,MAAI,OAAO;AAGX,MAAI,SAAS;AAEb,WAAS,WAAW,MAAY;AAC9B,QAAI,OAAO,GAAG;AAEZ,cAAQ,QAAQ,CAAC;WACZ;AAEL,aAAQ,QAAQ,OAAQ;;AAG1B,QAAI,OAAO,GAAG;AAEZ,cAAQ;AACR,aAAO;;AAGT,QAAI,OAAO,GAAG;AAEZ,gBAAU,SAAS,QAAQ,CAAC;AAC5B,cAAQ;;AAGV,WAAO;EACT;AAEA,WAAS,IAAI,GAAG,IAAI,MAAM,UAAU;AAClC,SAAK,WAAW,MAAM,CAAC,CAAC;;AAG1B,SAAO,UAAU,OAAO,IAAI,SAAS,QAAQ,CAAC,IAAI;AACpD;AAKM,SAAU,OAAO,OAAa;AAElC,MAAI,OAAO;AAEX,MAAI,OAAO;AAEX,QAAM,SAAS,IAAI,WAAa,MAAM,SAAS,IAAK,IAAK,CAAC;AAC1D,MAAI,IAAI;AAER,WAAS,WAAW,MAAY;AAI9B,QAAI,MAAM,YAAY,KAAK,YAAW,CAAE;AACxC,QAAI,QAAQ,QAAW;AACrB,YAAM,IAAI,MAAM,sBAAsB,KAAK,UAAU,IAAI,CAAC,EAAE;;AAI9D,YAAQ;AACR,YAAQ,QAAQ;AAChB,YAAQ;AAER,QAAI,QAAQ,GAAG;AAEb,aAAO,GAAG,IAAI;AACd,cAAQ;AAER,UAAI,OAAO,GAAG;AACZ,eAAQ,OAAQ,IAAI,OAAS;aACxB;AACL,eAAO;;;EAGb;AAEA,aAAW,KAAK,OAAO;AACrB,eAAW,CAAC;;AAGd,SAAO,OAAO,MAAM,GAAG,CAAC;AAC1B;;;ACjGA,IAAM,cAA2B,IAAI,YAAY;EAC/C;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EAAY;EACpF;EAAY;EAAY;EAAY;EAAY;EAAY;EA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",
  "names": ["Principal", "decode", "encode", "jsSha224", "value", "value", "hash", "encode", "decode", "Principal", "decode", "encode", "concat", "value", "CborTag", "encode", "borc", "concat", "decode", "import_borc", "import_js_sha256", "jsSha256", "value", "borc", "concat", "request", "decode", "blsVerify", "concat", "encode", "decode", "buf"]
}
