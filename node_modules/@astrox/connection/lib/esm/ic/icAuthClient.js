/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-non-null-asserted-optional-chain */
import { AnonymousIdentity, } from '@dfinity/agent';
import { isDelegationValid } from '@dfinity/authentication';
import { Delegation, DelegationChain, DelegationIdentity, Ed25519KeyIdentity, } from '@dfinity/identity';
import { PermissionsType, } from '../types';
import { IDENTITY_PROVIDER_DEFAULT, IDENTITY_PROVIDER_ENDPOINT, KEY_ICSTORAGE_DELEGATION, KEY_ICSTORAGE_KEY, KEY_ICSTORAGE_WALLET, ICStorage, _deleteStorage, } from './icStorage';
export class AuthClient {
    constructor(_identity, _key, _chain, _storage, _appId, _wallet, _idpWindowOption, 
    // A handle on the IdP window.
    _idpWindow, 
    // The event handler for processing events from the IdP.
    _eventHandler) {
        this._identity = _identity;
        this._key = _key;
        this._chain = _chain;
        this._storage = _storage;
        this._appId = _appId;
        this._wallet = _wallet;
        this._idpWindowOption = _idpWindowOption;
        this._idpWindow = _idpWindow;
        this._eventHandler = _eventHandler;
    }
    static async create(options = {
        appId: '',
    }) {
        var _a;
        const storage = (_a = options.storage) !== null && _a !== void 0 ? _a : new ICStorage('astrox-');
        let key = null;
        if (options.identity) {
            key = options.identity;
        }
        else {
            const maybeIdentityStorage = await storage.get(KEY_ICSTORAGE_KEY);
            if (maybeIdentityStorage) {
                try {
                    key = Ed25519KeyIdentity.fromJSON(maybeIdentityStorage);
                }
                catch (e) {
                    // Ignore this, this means that the ICStorage value isn't a valid Ed25519KeyIdentity
                    // serialization.
                }
            }
        }
        let identity = new AnonymousIdentity();
        let chain = null;
        let wallet = null;
        if (key) {
            try {
                const chainStorage = await storage.get(KEY_ICSTORAGE_DELEGATION);
                wallet = await storage.get(KEY_ICSTORAGE_WALLET);
                if (chainStorage) {
                    chain = DelegationChain.fromJSON(chainStorage);
                    // Verify that the delegation isn't expired.
                    if (!isDelegationValid(chain)) {
                        await _deleteStorage(storage);
                        key = null;
                    }
                    else {
                        identity = DelegationIdentity.fromDelegation(key, chain);
                    }
                }
            }
            catch (e) {
                console.error(e);
                // If there was a problem loading the chain, delete the key.
                await _deleteStorage(storage);
                key = null;
            }
        }
        return new this(identity, key, chain, storage, options.appId, wallet !== null ? wallet : undefined, options.idpWindowOption);
    }
    async _handleSuccess(message, onSuccess) {
        var _a;
        // console.log(message["identity"]);
        if (message['identity'] !== undefined) {
            const idDelegations = message['identity'].delegations.map(signedDelegation => {
                return {
                    delegation: new Delegation(signedDelegation.delegation.pubkey.buffer, signedDelegation.delegation.expiration, signedDelegation.delegation.targets),
                    signature: signedDelegation.signature.buffer,
                };
            });
            const idDelegationChain = DelegationChain.fromDelegations(idDelegations, message['identity'].userPublicKey
                .buffer);
            this._chain = idDelegationChain;
            this._wallet = message['wallet'];
        }
        else {
            const iiDelegations = message.delegations.map(signedDelegation => {
                return {
                    delegation: new Delegation(signedDelegation.delegation.pubkey.buffer, signedDelegation.delegation.expiration, signedDelegation.delegation.targets),
                    signature: signedDelegation.signature.buffer,
                };
            });
            const iiDelegationChain = DelegationChain.fromDelegations(iiDelegations, message.userPublicKey.buffer);
            this._chain = iiDelegationChain;
        }
        const key = this._key;
        if (!key) {
            return this;
        }
        this._delegationIdentity = DelegationIdentity.fromDelegation(key, this._chain);
        this._identity = this._delegationIdentity;
        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
        await (onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess());
        this._removeEventListener();
        return this;
    }
    getIdentity() {
        return this._identity;
    }
    getDelegationIdentity() {
        return this._delegationIdentity;
    }
    getInnerKey() {
        return this._key;
    }
    get wallet() {
        return this._wallet;
    }
    setWallet(data) {
        this._wallet = data;
    }
    async isAuthenticated() {
        return !this.getIdentity().getPrincipal().isAnonymous() && this._chain !== null;
    }
    async login(options) {
        var _a, _b, _c;
        let key = this._key;
        if (!key) {
            // Create a new key (whether or not one was in storage).
            key = Ed25519KeyIdentity.generate();
            this._key = key;
            await this._storage.set(KEY_ICSTORAGE_KEY, JSON.stringify(key));
        }
        // Create the URL of the IDP. (e.g. https://XXXX/#authorize)
        const identityProviderUrl = new URL(((_a = options === null || options === void 0 ? void 0 : options.identityProvider) === null || _a === void 0 ? void 0 : _a.toString()) || IDENTITY_PROVIDER_DEFAULT);
        // Set the correct hash if it isn't already set.
        identityProviderUrl.hash = IDENTITY_PROVIDER_ENDPOINT;
        // If `login` has been called previously, then close/remove any previous windows
        // and event listeners.
        (_b = this._idpWindow) === null || _b === void 0 ? void 0 : _b.close();
        this._removeEventListener();
        // Open a new window with the IDP provider.
        this._idpWindow = (_c = window.open(identityProviderUrl.toString(), 'idpWindow', this._idpWindowOption)) !== null && _c !== void 0 ? _c : undefined;
        // Add an event listener to handle responses.
        return new Promise((resolve, reject) => {
            this._eventHandler = this._getEventHandler(identityProviderUrl, resolve, reject, options);
            window.addEventListener('message', this._eventHandler);
        });
    }
    _getEventHandler(identityProviderUrl, resolve, reject, options) {
        return async (event) => {
            var _a, _b, _c;
            if (event.origin !== identityProviderUrl.origin) {
                return;
            }
            const message = event.data;
            switch (message.kind) {
                case 'authorize-ready': {
                    // IDP is ready. Send a message to request authorization.
                    const request = {
                        kind: 'authorize-client',
                        sessionPublicKey: new Uint8Array((_a = this._key) === null || _a === void 0 ? void 0 : _a.getPublicKey().toDer()),
                        maxTimeToLive: options === null || options === void 0 ? void 0 : options.maxTimeToLive,
                        permissions: (_b = options === null || options === void 0 ? void 0 : options.permissions) !== null && _b !== void 0 ? _b : [PermissionsType.identity],
                        appId: this._appId,
                    };
                    (_c = this._idpWindow) === null || _c === void 0 ? void 0 : _c.postMessage(request, identityProviderUrl.origin);
                    break;
                }
                case 'authorize-client-success':
                    // Create the delegation chain and store it.
                    try {
                        resolve(await this._handleSuccess(message, options === null || options === void 0 ? void 0 : options.onSuccess));
                        // Setting the storage is moved out of _handleSuccess to make
                        // it a sync function. Having _handleSuccess as an async function
                        // messes up the jest tests for some reason.
                        if (this._chain) {
                            await this._storage.set(KEY_ICSTORAGE_DELEGATION, JSON.stringify(this._chain.toJSON()));
                        }
                        if (this._wallet !== undefined) {
                            await this._storage.set(KEY_ICSTORAGE_WALLET, this._wallet);
                        }
                    }
                    catch (err) {
                        reject(this._handleFailure(err.message, options === null || options === void 0 ? void 0 : options.onError));
                    }
                    break;
                case 'authorize-client-failure':
                    reject(this._handleFailure(message.text, options === null || options === void 0 ? void 0 : options.onError));
                    break;
                default:
                    break;
            }
        };
    }
    _handleFailure(errorMessage, onError) {
        var _a;
        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
        onError === null || onError === void 0 ? void 0 : onError(errorMessage);
        this._removeEventListener();
        return errorMessage;
    }
    _removeEventListener() {
        if (this._eventHandler) {
            window.removeEventListener('message', this._eventHandler);
        }
        this._eventHandler = undefined;
    }
    async logout(options = {}) {
        _deleteStorage(this._storage);
        // Reset this auth client to a non-authenticated state.
        this._identity = new AnonymousIdentity();
        this._key = null;
        this._chain = null;
        this._wallet = undefined;
        if (options.returnTo) {
            try {
                window.history.pushState({}, '', options.returnTo);
            }
            catch (e) {
                window.location.href = options.returnTo;
            }
        }
    }
}
//
//# sourceMappingURL=icAuthClient.js.map