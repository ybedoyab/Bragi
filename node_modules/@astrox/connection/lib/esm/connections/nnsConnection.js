import { BaseConnection, executeWithLogging, _createActor } from './baseConnection';
import nns_idl from '../canisters/nns-dapp.idl';
import nns_idl_cert from '../canisters/nns-dapp-cert.idl';
import { NNS_CANISTER_ID } from '../utils/constants';
export class NNSConnection extends BaseConnection {
    constructor(identity, delegationIdentity, actor, agent, nnsCanisterId) {
        super(identity, delegationIdentity, nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, nns_idl, actor, agent);
        this.identity = identity;
        this.delegationIdentity = delegationIdentity;
        this.actor = actor;
        this.agent = agent;
    }
    get accountDetails() {
        return this._accountDetails;
    }
    /**
     * create connection
     * @param identity
     * @param delegationIdentity
     * @param actor
     * @param agent
     * @function createConnection
     * @returns {NNSConnection}
     */
    static createConnection(identity, delegationIdentity, actor, agent) {
        return new NNSConnection(identity, delegationIdentity, actor, agent);
    }
    /**
     * create Actor with DelegationIdentity
     * @param delegationIdentity
     * @param nnsCanisterId
     * @function {function name}
     * @returns {type} {description}
     */
    static async createActor(delegationIdentity, nnsCanisterId) {
        const actor = await _createActor(nns_idl, nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, delegationIdentity);
        return actor;
    }
    static async getTransactions({ nnsActor, delegationIdentity, }, { page_size, offset, account_identifier, }) {
        const actor = nnsActor !== null && nnsActor !== void 0 ? nnsActor : (await NNSConnection.createActor(delegationIdentity)).actor;
        const result = await actor.get_transactions({
            page_size,
            offset,
            account_identifier,
        });
        return result;
    }
    /**
     * get NNS Actor, used internally
     * @param nnsCanisterId
     * @function {function name}
     * @returns {type} {description}
     */
    async getNNSActor(nnsCanisterId) {
        const actor = await this._getActor(nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, nns_idl);
        return actor;
    }
    /**
     * get NNS Actor, used internally
     * @param nnsCanisterId
     * @function {function name}
     * @returns {type} {description}
     */
    async getNNSActorCert(nnsCanisterId) {
        const actor = await this._getActor(nnsCanisterId !== null && nnsCanisterId !== void 0 ? nnsCanisterId : NNS_CANISTER_ID, nns_idl_cert);
        return actor;
    }
    /**
     * when NNSConnection is created, we can get account created to NNS.
     * Even we can just calculate the login principal to NNS DApp, however,
     * The NNS DApp stores and create account, thus, a new Identity login will get NO ACCOUNT created by default.
     * We need to manually create account using `add_account` when no account found.
     *
     * @param cert
     * @function {function name}
     * @returns {type} {description}
     */
    async getAccount(cert) {
        const actor = cert === true ? await this.getNNSActorCert() : await this.getNNSActor();
        const response = await executeWithLogging(() => actor.get_account());
        if (response === { AccountNotFound: null }) {
            return undefined;
        }
        else {
            this._accountDetails = response['Ok'];
            return response['Ok'];
        }
    }
    /**
     * create account when new identity logined to NNS
     * @function {function name}
     * @returns {type} {description}
     */
    async addAccount() {
        const actor = await this.getNNSActor();
        const response = await executeWithLogging(() => actor.add_account());
        return response;
    }
}
// export const requestNNSDelegation = async (
//   identity: SignIdentity,
// ): Promise<DelegationIdentity> => {
//   const tenMinutesInMsec = 10 * 1000 * 60;
//   const date = new Date(Date.now() + tenMinutesInMsec);
//   return requestDelegation(identity, { canisterId, date });
// };
//# sourceMappingURL=nnsConnection.js.map