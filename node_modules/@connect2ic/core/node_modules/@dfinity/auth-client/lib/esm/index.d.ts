/** @module AuthClient */
import { Identity, SignIdentity } from '@dfinity/agent';
import { DelegationChain } from '@dfinity/identity';
import { IdleManager, IdleManagerOptions } from './idleManager';
export declare const ERROR_USER_INTERRUPT = "UserInterrupt";
/**
 * List of options for creating an {@link AuthClient}.
 */
export interface AuthClientCreateOptions {
    /**
     * An identity to use as the base
     */
    identity?: SignIdentity;
    /**
     * Optional storage with get, set, and remove. Uses LocalStorage by default
     */
    storage?: AuthClientStorage;
    /**
     * Options to handle idle timeouts
     * @default after 30 minutes, invalidates the identity
     */
    idleOptions?: IdleOptions;
}
export interface IdleOptions extends IdleManagerOptions {
    /**
     * Disables idle functionality for {@link IdleManager}
     * @default false
     */
    disableIdle?: boolean;
    /**
     * Disables default idle behavior - call logout & reload window
     * @default false
     */
    disableDefaultIdleCallback?: boolean;
}
export * from './idleManager';
export interface AuthClientLoginOptions {
    /**
     * Identity provider
     * @default "https://identity.ic0.app"
     */
    identityProvider?: string | URL;
    /**
     * Expiration of the authentication in nanoseconds
     * @default  BigInt(8) hours * BigInt(3_600_000_000_000) nanoseconds
     */
    maxTimeToLive?: bigint;
    /**
     * Auth Window feature config string
     * @example "toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100"
     */
    windowOpenerFeatures?: string;
    /**
     * Callback once login has completed
     */
    onSuccess?: (() => void) | (() => Promise<void>);
    /**
     * Callback in case authentication fails
     */
    onError?: ((error?: string) => void) | ((error?: string) => Promise<void>);
}
/**
 * Interface for persisting user authentication data
 */
export interface AuthClientStorage {
    get(key: string): Promise<string | null>;
    set(key: string, value: string): Promise<void>;
    remove(key: string): Promise<void>;
}
export declare class LocalStorage implements AuthClientStorage {
    readonly prefix: string;
    private readonly _localStorage?;
    constructor(prefix?: string, _localStorage?: Storage | undefined);
    get(key: string): Promise<string | null>;
    set(key: string, value: string): Promise<void>;
    remove(key: string): Promise<void>;
    private _getLocalStorage;
}
/**
 * Tool to manage authentication and identity
 * @see {@link AuthClient}
 */
export declare class AuthClient {
    private _identity;
    private _key;
    private _chain;
    private _storage;
    readonly idleManager: IdleManager | undefined;
    private _createOptions;
    private _idpWindow?;
    private _eventHandler?;
    /**
     * Create an AuthClient to manage authentication and identity
     * @constructs {@link AuthClient}
     * @param {AuthClientCreateOptions} options
     * @see {@link AuthClientCreateOptions}
     * @param options.identity Optional Identity to use as the base
     * @see {@link SignIdentity}
     * @param options.storage Storage mechanism for delegration credentials
     * @see {@link AuthClientStorage}
     * @param {IdleOptions} options.idleOptions Configures an {@link IdleManager}
     * @see {@link IdleOptions}
     * Default behavior is to clear stored identity and reload the page when a user goes idle, unless you set the disableDefaultIdleCallback flag or pass in a custom idle callback.
     * @example
     * const authClient = await AuthClient.create({
     *   idleOptions: {
     *     disableIdle: true
     *   }
     * })
     */
    static create(options?: {
        /**
         * An {@link Identity} to use as the base.
         *  By default, a new {@link AnonymousIdentity}
         */
        identity?: SignIdentity;
        /**
         * {@link AuthClientStorage}
         * @description Optional storage with get, set, and remove. Uses {@link LocalStorage} by default
         */
        storage?: AuthClientStorage;
        /**
         * Options to handle idle timeouts
         * @default after 10 minutes, invalidates the identity
         */
        idleOptions?: IdleOptions;
    }): Promise<AuthClient>;
    protected constructor(_identity: Identity, _key: SignIdentity | null, _chain: DelegationChain | null, _storage: AuthClientStorage, idleManager: IdleManager | undefined, _createOptions: AuthClientCreateOptions | undefined, _idpWindow?: Window | undefined, _eventHandler?: ((event: MessageEvent) => void) | undefined);
    private _handleSuccess;
    getIdentity(): Identity;
    isAuthenticated(): Promise<boolean>;
    /**
     * AuthClient Login -
     * Opens up a new window to authenticate with Internet Identity
     * @param {AuthClientLoginOptions} options
     * @param options.identityProvider Identity provider
     * @param options.maxTimeToLive Expiration of the authentication in nanoseconds
     * @param options.windowOpenerFeatures Configures the opened authentication window
     * @param options.onSuccess Callback once login has completed
     * @param options.onError Callback in case authentication fails
     * @example
     * const authClient = await AuthClient.create();
     * authClient.login({
     *  identityProvider: 'http://<canisterID>.localhost:8000',
     *  maxTimeToLive: BigInt (7) * BigInt(24) * BigInt(3_600_000_000_000), // 1 week
     *  windowOpenerFeatures: "toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100",
     *  onSuccess: () => {
     *    console.log('Login Successful!');
     *  },
     *  onError: (error) => {
     *    console.error('Login Failed: ', error);
     *  }
     * });
     */
    login(options?: {
        /**
         * Identity provider
         * @default "https://identity.ic0.app"
         */
        identityProvider?: string | URL;
        /**
         * Expiration of the authentication in nanoseconds
         * @default  BigInt(8) hours * BigInt(3_600_000_000_000) nanoseconds
         */
        maxTimeToLive?: bigint;
        /**
         * Auth Window feature config string
         * @example "toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100"
         */
        windowOpenerFeatures?: string;
        /**
         * Callback once login has completed
         */
        onSuccess?: (() => void) | (() => Promise<void>);
        /**
         * Callback in case authentication fails
         */
        onError?: ((error?: string) => void) | ((error?: string) => Promise<void>);
    }): Promise<void>;
    private _getEventHandler;
    private _handleFailure;
    private _removeEventListener;
    logout(options?: {
        returnTo?: string;
    }): Promise<void>;
}
