import type { IConnector, IWalletConnector } from "./connectors";
import { IDL } from "@dfinity/candid";
import { ActorSubclass, Agent } from "@dfinity/agent";
import { Principal } from "@dfinity/principal";
declare type Plug = {
    createActor: <T>(args: {
        canisterId: string;
        interfaceFactory: IDL.InterfaceFactory;
    }) => Promise<ActorSubclass<T>>;
    agent: Agent;
    createAgent: (options: {
        host: string;
        whitelist: Array<string>;
    }) => Promise<Agent>;
    getPrincipal: () => Promise<Principal>;
    isConnected: () => Promise<boolean>;
    disconnect: () => Promise<void>;
    requestConnect: (Config: any) => Promise<boolean>;
    requestTransfer: (args: {
        to: string;
        amount: number;
        opts?: {
            fee?: number;
            memo?: string;
            from_subaccount?: Number;
            created_at_time?: {
                timestamp_nanos: number;
            };
        };
    }) => Promise<{
        height: number;
    }>;
    requestBalance: () => Promise<Array<{
        amount: number;
        canisterId: string;
        decimals: number;
        image?: string;
        name: string;
        symbol: string;
    }>>;
    getManagementCanister: () => Promise<ActorSubclass | undefined>;
};
declare class PlugWallet implements IConnector, IWalletConnector {
    #private;
    meta: {
        features: string[];
        icon: {
            light: any;
            dark: any;
        };
        id: string;
        name: string;
    };
    get identity(): any;
    get principal(): string | undefined;
    get client(): any;
    get ic(): Plug | undefined;
    constructor(userConfig?: {});
    set config(config: {
        whitelist: string[];
        host: string;
        dev: boolean;
    });
    get config(): {
        whitelist: string[];
        host: string;
        dev: boolean;
    };
    init(): Promise<boolean>;
    isConnected(): Promise<boolean>;
    createActor<Service>(canisterId: string, idlFactory: IDL.InterfaceFactory): Promise<ActorSubclass<Service> | undefined>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    address(): {
        principal: string | undefined;
    };
    requestTransfer({ amount, to, }: {
        amount: number;
        to: string;
    }): Promise<{
        height: number;
    } | false>;
    queryBalance(): Promise<Array<{
        amount: number;
        canisterId: string;
        decimals: number;
        image?: string;
        name: string;
        symbol: string;
    }> | undefined>;
    getManagementCanister(): Promise<ActorSubclass<Record<string, import("@dfinity/agent").ActorMethod<unknown[], unknown>>> | undefined>;
}
export { PlugWallet, };
