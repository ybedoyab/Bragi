import { ActorSubclass } from "@dfinity/agent";
import type { IConnector } from "./connectors";
import { IDL } from "@dfinity/candid";
declare class NFID implements IConnector {
    #private;
    meta: {
        features: never[];
        icon: {
            light: any;
            dark: any;
        };
        id: string;
        name: string;
    };
    get identity(): any;
    get principal(): string | undefined;
    get client(): any;
    constructor(userConfig?: {});
    set config(config: {
        whitelist: string[];
        appName: string;
        host: string;
        providerUrl: string;
        dev: Boolean;
    });
    get config(): {
        whitelist: string[];
        appName: string;
        host: string;
        providerUrl: string;
        dev: Boolean;
    };
    init(): Promise<boolean>;
    isConnected(): Promise<any>;
    createActor<Service>(canisterId: string, idlFactory: IDL.InterfaceFactory): Promise<ActorSubclass<Service> | undefined>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
}
export { NFID };
