import type { IDL } from "@dfinity/candid";
import type { ActorSubclass, Identity } from "@dfinity/agent";
import type { SignerResponseSuccess } from "@astrox/connection/lib/esm/types";
import type { IConnector, IWalletConnector } from "./connectors";
declare class AstroX implements IConnector, IWalletConnector {
    #private;
    meta: {
        features: string[];
        icon: {
            light: any;
            dark: any;
        };
        id: string;
        name: string;
    };
    get identity(): Identity | undefined;
    get principal(): string | undefined;
    constructor(userConfig?: {});
    set config(config: {
        whitelist: string[];
        providerUrl: string;
        ledgerCanisterId: string;
        ledgerHost?: string | undefined;
        host: string;
        dev: boolean;
    });
    get config(): {
        whitelist: string[];
        providerUrl: string;
        ledgerCanisterId: string;
        ledgerHost?: string | undefined;
        host: string;
        dev: boolean;
    };
    init(): Promise<boolean>;
    isConnected(): Promise<boolean>;
    createActor<Service>(canisterId: string, idlFactory: IDL.InterfaceFactory): Promise<ActorSubclass<Service> | undefined>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    address(): {
        principal: string | undefined;
    };
    requestTransfer({ amount, to, from, }: {
        amount: number;
        to: string;
        from?: string;
    }): Promise<{
        height: number;
    } | false>;
    queryBalance(): Promise<Array<{
        amount: number;
        canisterId: string;
        decimals: number;
        image: string;
        name: string;
        symbol: string;
    }>>;
    signMessage({ message }: {
        message: string;
    }): Promise<SignerResponseSuccess | string | undefined>;
}
export { AstroX, };
