import type { ActorSubclass } from "@dfinity/agent";
import type { IDL } from "@dfinity/candid";
import type { IConnector, IWalletConnector } from "../providers/connectors";
declare type Provider = IConnector & Partial<IWalletConnector>;
export declare type RootContext = {
    host: string;
    dev: boolean;
    autoConnect: boolean;
    whitelist: Array<string>;
    principal?: string;
    activeProvider?: Provider;
    providers: Array<Provider>;
    canisters: any;
    actors: {
        [canisterName: string]: ActorSubclass;
    };
    anonymousActors: {
        [canisterName: string]: ActorSubclass;
    };
};
declare type InitEvent = {
    type: "INIT";
    data: {
        whitelist: Array<string>;
        host?: string;
        providers: Array<Provider>;
        dev?: boolean;
        autoConnect?: boolean;
    };
};
declare type DoneEvent = {
    type: "DONE";
    data: {
        providers: Array<Provider>;
    };
};
declare type DoneAndConnectedEvent = {
    type: "DONE_AND_CONNECTED";
    data: {
        activeProvider: Provider;
        providers: Array<Provider>;
        principal: string;
    };
};
declare type ConnectEvent = {
    type: "CONNECT";
    data: {
        provider: string;
    };
};
declare type ConnectDoneEvent = {
    type: "CONNECT_DONE";
    data: {
        activeProvider: Provider;
        principal: string;
    };
};
declare type DisconnectEvent = {
    type: "DISCONNECT";
};
declare type ErrorEvent = {
    type: "ERROR";
    data: {
        error: any;
    };
};
declare type CreateActorEvent = {
    type: "CREATE_ACTOR";
    data: {
        canisterName: string;
        canisterId: string;
        idlFactory: IDL.InterfaceFactory;
    };
};
declare type SaveActorEvent = {
    type: "SAVE_ACTOR";
    data: {
        actor: ActorSubclass;
        canisterName: string;
    };
};
declare type CreateAnonymousActorEvent = {
    type: "CREATE_ANONYMOUS_ACTOR";
    data: {
        canisterName: string;
        canisterId: string;
        idlFactory: IDL.InterfaceFactory;
    };
};
declare type SaveAnonymousActorEvent = {
    type: "SAVE_ANONYMOUS_ACTOR";
    data: {
        actor: ActorSubclass;
        canisterName: string;
    };
};
export declare type RootEvent = InitEvent | DoneEvent | ConnectDoneEvent | DoneAndConnectedEvent | ConnectEvent | DisconnectEvent | ErrorEvent | CreateActorEvent | SaveActorEvent | CreateAnonymousActorEvent | SaveAnonymousActorEvent;
declare type Config = {
    whitelist?: Array<string>;
    host?: string;
    dev?: boolean;
    autoConnect?: boolean;
    providerUrl?: string;
    ledgerCanisterId?: string;
    ledgerHost?: string;
    appName?: string;
};
declare type ClientOptions = {
    providers: Array<Provider> | ((config: Config) => Array<Provider>);
    canisters?: {
        [canisterName: string]: {
            canisterId: string;
            idlFactory: IDL.InterfaceFactory;
        };
    };
    globalProviderConfig?: {
        whitelist?: Array<string>;
        host?: string;
        dev?: boolean;
        autoConnect?: boolean;
        ledgerCanisterId?: string;
        ledgerHost?: string;
        appName?: string;
    };
};
declare const createClient: ({ canisters, providers: p, globalProviderConfig, }: ClientOptions) => {
    _service: import("xstate").Interpreter<RootContext, any, RootEvent, {
        value: any;
        context: RootContext;
    }, import("xstate").ResolveTypegenMeta<import("xstate").TypegenDisabled, RootEvent, import("xstate").BaseActionObject, import("xstate").ServiceMap>>;
    on: (evt: any, fn: any) => () => any;
    subscribe: (fn: any) => () => void;
    connect: (provider: any) => void;
    disconnect: () => void;
    readonly providers: any[];
    readonly activeProvider: any;
    readonly principal: string | undefined;
    readonly actors: {
        [canisterName: string]: ActorSubclass<Record<string, import("@dfinity/agent").ActorMethod<unknown[], unknown>>>;
    };
    readonly anonymousActors: {
        [canisterName: string]: ActorSubclass<Record<string, import("@dfinity/agent").ActorMethod<unknown[], unknown>>>;
    };
    readonly status: any;
    readonly config: {
        whitelist: Array<string>;
        host: string;
        dev: boolean;
        autoConnect: boolean;
        ledgerCanisterId?: string | undefined;
        ledgerHost?: string | undefined;
        appName?: string | undefined;
    };
};
export { createClient };
